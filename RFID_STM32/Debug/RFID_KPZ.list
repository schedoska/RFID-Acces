
RFID_KPZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc4  08006fc4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fcc  08006fcc  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08006fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f0  2000004c  08007020  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08007020  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ddb  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c02  00000000  00000000  00037e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f15  00000000  00000000  0003d418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001199e  00000000  00000000  0006532d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6846  00000000  00000000  00076ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d511  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  0016d58c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006db4 	.word	0x08006db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08006db4 	.word	0x08006db4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <app_default_state>:
uint8_t tim_flag  = 0;
uint8_t uart_flag = 0;

uint8_t RFID_buffer[RFID_FRAME_SIZE];

void app_default_state(I2C_HandleTypeDef *i2c_handle){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if(prev_app_state != DEFAULT_STATE)
 80004d0:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <app_default_state+0x104>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d012      	beq.n	80004fe <app_default_state+0x36>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	483c      	ldr	r0, [pc, #240]	; (80005d0 <app_default_state+0x108>)
 80004e0:	f002 fa82 	bl	80029e8 <HAL_GPIO_WritePin>
		lcd_clear(i2c_handle);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f001 fa45 	bl	8001974 <lcd_clear>
		lcd_send_text("Doors closed", i2c_handle);
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	4839      	ldr	r0, [pc, #228]	; (80005d4 <app_default_state+0x10c>)
 80004ee:	f001 fa50 	bl	8001992 <lcd_send_text>
		prev_app_state = DEFAULT_STATE;
 80004f2:	4b36      	ldr	r3, [pc, #216]	; (80005cc <app_default_state+0x104>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
		uart_flag = 0;
 80004f8:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <app_default_state+0x110>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	}

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 80004fe:	f001 f995 	bl	800182c <keypad_scan_pressed_index_filtered>
 8000502:	4603      	mov	r3, r0
 8000504:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800050e:	d01c      	beq.n	800054a <app_default_state+0x82>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000514:	4618      	mov	r0, r3
 8000516:	f001 f96d 	bl	80017f4 <keypad_index_to_char>
 800051a:	4603      	mov	r3, r0
 800051c:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char != '#' && pressed_key_char != '*')
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	2b23      	cmp	r3, #35	; 0x23
 8000522:	d012      	beq.n	800054a <app_default_state+0x82>
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	2b2a      	cmp	r3, #42	; 0x2a
 8000528:	d00f      	beq.n	800054a <app_default_state+0x82>
		{
			password_buffer_index = 0;
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <app_default_state+0x114>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
			password_buffer[password_buffer_index++] = pressed_key_char;
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <app_default_state+0x114>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	4a28      	ldr	r2, [pc, #160]	; (80005dc <app_default_state+0x114>)
 800053a:	7011      	strb	r1, [r2, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <app_default_state+0x118>)
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	5453      	strb	r3, [r2, r1]
			current_app_state = WRITE_PASSWORD_STATE;
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <app_default_state+0x11c>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
		}
	}
	if(uart_flag == 1)
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <app_default_state+0x110>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d138      	bne.n	80005c4 <app_default_state+0xfc>
	{
		uart_flag = 0;
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <app_default_state+0x110>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
		if(find_tag(RFID_buffer + 7))
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <app_default_state+0x120>)
 800055a:	4618      	mov	r0, r3
 800055c:	f000 ff36 	bl	80013cc <find_tag>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d01d      	beq.n	80005a2 <app_default_state+0xda>
		{
			lcd_clear(i2c_handle);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f001 fa04 	bl	8001974 <lcd_clear>
			lcd_send_text("Access allowed", i2c_handle);
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	481f      	ldr	r0, [pc, #124]	; (80005ec <app_default_state+0x124>)
 8000570:	f001 fa0f 	bl	8001992 <lcd_send_text>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	4815      	ldr	r0, [pc, #84]	; (80005d0 <app_default_state+0x108>)
 800057c:	f002 fa34 	bl	80029e8 <HAL_GPIO_WritePin>
			HAL_Delay(DOORS_OPEN_TIME_MS);
 8000580:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000584:	f001 fefc 	bl	8002380 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	4810      	ldr	r0, [pc, #64]	; (80005d0 <app_default_state+0x108>)
 8000590:	f002 fa2a 	bl	80029e8 <HAL_GPIO_WritePin>
			prev_app_state = WRITE_PASSWORD_STATE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <app_default_state+0x104>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
			uart_flag = 0;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <app_default_state+0x110>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(ACCESS_DENIED_SCREEN_TIME_MS);
			prev_app_state = WRITE_PASSWORD_STATE;
			uart_flag = 0;
		}
	}
}
 80005a0:	e010      	b.n	80005c4 <app_default_state+0xfc>
			lcd_clear(i2c_handle);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 f9e6 	bl	8001974 <lcd_clear>
			lcd_send_text("Access denied", i2c_handle);
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <app_default_state+0x128>)
 80005ac:	f001 f9f1 	bl	8001992 <lcd_send_text>
			HAL_Delay(ACCESS_DENIED_SCREEN_TIME_MS);
 80005b0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005b4:	f001 fee4 	bl	8002380 <HAL_Delay>
			prev_app_state = WRITE_PASSWORD_STATE;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <app_default_state+0x104>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
			uart_flag = 0;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <app_default_state+0x110>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	48000800 	.word	0x48000800
 80005d4:	08006dcc 	.word	0x08006dcc
 80005d8:	2000006b 	.word	0x2000006b
 80005dc:	20000069 	.word	0x20000069
 80005e0:	20000080 	.word	0x20000080
 80005e4:	20000068 	.word	0x20000068
 80005e8:	20000077 	.word	0x20000077
 80005ec:	08006ddc 	.word	0x08006ddc
 80005f0:	08006dec 	.word	0x08006dec

080005f4 <app_write_password_state>:

void app_write_password_state(I2C_HandleTypeDef *i2c_handle){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if(prev_app_state != WRITE_PASSWORD_STATE)
 80005fc:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <app_write_password_state+0x104>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d021      	beq.n	8000648 <app_write_password_state+0x54>
	{
		lcd_clear(i2c_handle);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f001 f9b5 	bl	8001974 <lcd_clear>
		lcd_send_text("Password:", i2c_handle);
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	483b      	ldr	r0, [pc, #236]	; (80006fc <app_write_password_state+0x108>)
 800060e:	f001 f9c0 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	20c0      	movs	r0, #192	; 0xc0
 8000616:	f001 f925 	bl	8001864 <lcd_send_cmd>
		lcd_send_data('*', i2c_handle);
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	202a      	movs	r0, #42	; 0x2a
 800061e:	f001 f94f 	bl	80018c0 <lcd_send_data>
		prev_app_state = WRITE_PASSWORD_STATE;
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <app_write_password_state+0x104>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_PASSWORD_IDLE_TIME;
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <app_write_password_state+0x10c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2201      	movs	r2, #1
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 800063a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <app_write_password_state+0x110>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = DEFAULT_STATE;
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <app_write_password_state+0x110>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d102      	bne.n	8000656 <app_write_password_state+0x62>
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <app_write_password_state+0x114>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 8000656:	f001 f8e9 	bl	800182c <keypad_scan_pressed_index_filtered>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 800065e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d043      	beq.n	80006f0 <app_write_password_state+0xfc>
	{
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <app_write_password_state+0x10c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2201      	movs	r2, #1
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f8bd 	bl	80017f4 <keypad_index_to_char>
 800067a:	4603      	mov	r3, r0
 800067c:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '#' || pressed_key_char == '*')
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	2b23      	cmp	r3, #35	; 0x23
 8000682:	d002      	beq.n	800068a <app_write_password_state+0x96>
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	2b2a      	cmp	r3, #42	; 0x2a
 8000688:	d103      	bne.n	8000692 <app_write_password_state+0x9e>
		{
			current_app_state = DEFAULT_STATE;
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <app_write_password_state+0x114>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
			return;
 8000690:	e02e      	b.n	80006f0 <app_write_password_state+0xfc>
		}
		password_buffer[password_buffer_index++] = pressed_key_char;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <app_write_password_state+0x118>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	b2d1      	uxtb	r1, r2
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <app_write_password_state+0x118>)
 800069c:	7011      	strb	r1, [r2, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <app_write_password_state+0x11c>)
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	5453      	strb	r3, [r2, r1]
		lcd_send_data('*', i2c_handle);
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	202a      	movs	r0, #42	; 0x2a
 80006aa:	f001 f909 	bl	80018c0 <lcd_send_data>
		if(password_buffer_index > 3)
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <app_write_password_state+0x118>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d91c      	bls.n	80006f0 <app_write_password_state+0xfc>
		{
			if(app_is_password_correct())
 80006b6:	f000 fbe5 	bl	8000e84 <app_is_password_correct>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <app_write_password_state+0xe0>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <app_write_password_state+0x120>)
 80006c8:	f002 f98e 	bl	80029e8 <HAL_GPIO_WritePin>
				current_app_state = MENU_STATE_PAGE_1;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <app_write_password_state+0x114>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e00d      	b.n	80006f0 <app_write_password_state+0xfc>
			}
			else
			{
				lcd_clear(i2c_handle);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 f94d 	bl	8001974 <lcd_clear>
				lcd_send_text("Wrong password", i2c_handle);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	480e      	ldr	r0, [pc, #56]	; (8000718 <app_write_password_state+0x124>)
 80006de:	f001 f958 	bl	8001992 <lcd_send_text>
				HAL_Delay(WRONG_PASSWORD_SCREEN_TIME_MS);
 80006e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006e6:	f001 fe4b 	bl	8002380 <HAL_Delay>
				current_app_state = DEFAULT_STATE;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <app_write_password_state+0x114>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08006dfc 	.word	0x08006dfc
 8000700:	20000758 	.word	0x20000758
 8000704:	2000006a 	.word	0x2000006a
 8000708:	20000068 	.word	0x20000068
 800070c:	20000069 	.word	0x20000069
 8000710:	20000080 	.word	0x20000080
 8000714:	48000800 	.word	0x48000800
 8000718:	08006e08 	.word	0x08006e08

0800071c <app_menu_state_page_1>:

void app_menu_state_page_1(I2C_HandleTypeDef *i2c_handle){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(prev_app_state != MENU_STATE_PAGE_1)
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <app_menu_state_page_1+0xb4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b04      	cmp	r3, #4
 800072a:	d021      	beq.n	8000770 <app_menu_state_page_1+0x54>
	{
		lcd_clear(i2c_handle);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f001 f921 	bl	8001974 <lcd_clear>
		lcd_send_text("Settings   [1/4]", i2c_handle);
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4827      	ldr	r0, [pc, #156]	; (80007d4 <app_menu_state_page_1+0xb8>)
 8000736:	f001 f92c 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	20c0      	movs	r0, #192	; 0xc0
 800073e:	f001 f891 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Add user", i2c_handle);
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4824      	ldr	r0, [pc, #144]	; (80007d8 <app_menu_state_page_1+0xbc>)
 8000746:	f001 f924 	bl	8001992 <lcd_send_text>
		prev_app_state = MENU_STATE_PAGE_1;
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <app_menu_state_page_1+0xb4>)
 800074c:	2204      	movs	r2, #4
 800074e:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_MENU_PAGE_IDLE_TIME;
 8000750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000754:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <app_menu_state_page_1+0xc0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2201      	movs	r2, #1
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 8000762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <app_menu_state_page_1+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = DEFAULT_STATE;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <app_menu_state_page_1+0xc4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d102      	bne.n	800077e <app_menu_state_page_1+0x62>
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <app_menu_state_page_1+0xc8>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 800077e:	f001 f855 	bl	800182c <keypad_scan_pressed_index_filtered>
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078e:	d01a      	beq.n	80007c6 <app_menu_state_page_1+0xaa>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f82d 	bl	80017f4 <keypad_index_to_char>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '0')
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	2b30      	cmp	r3, #48	; 0x30
 80007a2:	d103      	bne.n	80007ac <app_menu_state_page_1+0x90>
		{
			current_app_state = ADD_USER_STATE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <app_menu_state_page_1+0xc8>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	701a      	strb	r2, [r3, #0]
		else if(pressed_key_char == '*')
		{
			current_app_state = MENU_STATE_PAGE_4;
		}
	}
}
 80007aa:	e00c      	b.n	80007c6 <app_menu_state_page_1+0xaa>
		else if(pressed_key_char == '#')
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	2b23      	cmp	r3, #35	; 0x23
 80007b0:	d103      	bne.n	80007ba <app_menu_state_page_1+0x9e>
			current_app_state = MENU_STATE_PAGE_2;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <app_menu_state_page_1+0xc8>)
 80007b4:	2205      	movs	r2, #5
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	e005      	b.n	80007c6 <app_menu_state_page_1+0xaa>
		else if(pressed_key_char == '*')
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b2a      	cmp	r3, #42	; 0x2a
 80007be:	d102      	bne.n	80007c6 <app_menu_state_page_1+0xaa>
			current_app_state = MENU_STATE_PAGE_4;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <app_menu_state_page_1+0xc8>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000
 80007d4:	08006e18 	.word	0x08006e18
 80007d8:	08006e2c 	.word	0x08006e2c
 80007dc:	20000758 	.word	0x20000758
 80007e0:	2000006a 	.word	0x2000006a
 80007e4:	20000068 	.word	0x20000068

080007e8 <app_menu_state_page_2>:

void app_menu_state_page_2(I2C_HandleTypeDef *i2c_handle){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(prev_app_state != MENU_STATE_PAGE_2)
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <app_menu_state_page_2+0xb4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	d021      	beq.n	800083c <app_menu_state_page_2+0x54>
	{
		lcd_clear(i2c_handle);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f001 f8bb 	bl	8001974 <lcd_clear>
		lcd_send_text("Settings   [2/4]", i2c_handle);
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4827      	ldr	r0, [pc, #156]	; (80008a0 <app_menu_state_page_2+0xb8>)
 8000802:	f001 f8c6 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	20c0      	movs	r0, #192	; 0xc0
 800080a:	f001 f82b 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Delete user", i2c_handle);
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	4824      	ldr	r0, [pc, #144]	; (80008a4 <app_menu_state_page_2+0xbc>)
 8000812:	f001 f8be 	bl	8001992 <lcd_send_text>
		prev_app_state = MENU_STATE_PAGE_2;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <app_menu_state_page_2+0xb4>)
 8000818:	2205      	movs	r2, #5
 800081a:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_MENU_PAGE_IDLE_TIME;
 800081c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000820:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <app_menu_state_page_2+0xc0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2201      	movs	r2, #1
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 800082e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <app_menu_state_page_2+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = DEFAULT_STATE;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <app_menu_state_page_2+0xc4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d102      	bne.n	800084a <app_menu_state_page_2+0x62>
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <app_menu_state_page_2+0xc8>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 800084a:	f000 ffef 	bl	800182c <keypad_scan_pressed_index_filtered>
 800084e:	4603      	mov	r3, r0
 8000850:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085a:	d01a      	beq.n	8000892 <app_menu_state_page_2+0xaa>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 ffc7 	bl	80017f4 <keypad_index_to_char>
 8000866:	4603      	mov	r3, r0
 8000868:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '0')
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	2b30      	cmp	r3, #48	; 0x30
 800086e:	d103      	bne.n	8000878 <app_menu_state_page_2+0x90>
		{
			current_app_state = DELETE_USER_STATE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <app_menu_state_page_2+0xc8>)
 8000872:	2209      	movs	r2, #9
 8000874:	701a      	strb	r2, [r3, #0]
		else if(pressed_key_char == '*')
		{
			current_app_state = MENU_STATE_PAGE_1;
		}
	}
}
 8000876:	e00c      	b.n	8000892 <app_menu_state_page_2+0xaa>
		else if(pressed_key_char == '#')
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	2b23      	cmp	r3, #35	; 0x23
 800087c:	d103      	bne.n	8000886 <app_menu_state_page_2+0x9e>
			current_app_state = MENU_STATE_PAGE_3;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <app_menu_state_page_2+0xc8>)
 8000880:	2206      	movs	r2, #6
 8000882:	701a      	strb	r2, [r3, #0]
}
 8000884:	e005      	b.n	8000892 <app_menu_state_page_2+0xaa>
		else if(pressed_key_char == '*')
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	2b2a      	cmp	r3, #42	; 0x2a
 800088a:	d102      	bne.n	8000892 <app_menu_state_page_2+0xaa>
			current_app_state = MENU_STATE_PAGE_1;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <app_menu_state_page_2+0xc8>)
 800088e:	2204      	movs	r2, #4
 8000890:	701a      	strb	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	08006e38 	.word	0x08006e38
 80008a4:	08006e4c 	.word	0x08006e4c
 80008a8:	20000758 	.word	0x20000758
 80008ac:	2000006a 	.word	0x2000006a
 80008b0:	20000068 	.word	0x20000068

080008b4 <app_menu_state_page_3>:

void app_menu_state_page_3(I2C_HandleTypeDef *i2c_handle){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(prev_app_state != MENU_STATE_PAGE_3)
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <app_menu_state_page_3+0xb4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	d021      	beq.n	8000908 <app_menu_state_page_3+0x54>
	{
		lcd_clear(i2c_handle);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f001 f855 	bl	8001974 <lcd_clear>
		lcd_send_text("Settings   [3/4]", i2c_handle);
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	4827      	ldr	r0, [pc, #156]	; (800096c <app_menu_state_page_3+0xb8>)
 80008ce:	f001 f860 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	20c0      	movs	r0, #192	; 0xc0
 80008d6:	f000 ffc5 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Change passw.", i2c_handle);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <app_menu_state_page_3+0xbc>)
 80008de:	f001 f858 	bl	8001992 <lcd_send_text>
		prev_app_state = MENU_STATE_PAGE_3;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <app_menu_state_page_3+0xb4>)
 80008e4:	2206      	movs	r2, #6
 80008e6:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_MENU_PAGE_IDLE_TIME;
 80008e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ec:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <app_menu_state_page_3+0xc0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2201      	movs	r2, #1
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 80008fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <app_menu_state_page_3+0xc4>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = DEFAULT_STATE;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <app_menu_state_page_3+0xc4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d102      	bne.n	8000916 <app_menu_state_page_3+0x62>
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <app_menu_state_page_3+0xc8>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 8000916:	f000 ff89 	bl	800182c <keypad_scan_pressed_index_filtered>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000926:	d01a      	beq.n	800095e <app_menu_state_page_3+0xaa>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff61 	bl	80017f4 <keypad_index_to_char>
 8000932:	4603      	mov	r3, r0
 8000934:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '0')
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	2b30      	cmp	r3, #48	; 0x30
 800093a:	d103      	bne.n	8000944 <app_menu_state_page_3+0x90>
		{
			current_app_state = CHANGE_PASSWORD_STATE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <app_menu_state_page_3+0xc8>)
 800093e:	220a      	movs	r2, #10
 8000940:	701a      	strb	r2, [r3, #0]
		else if(pressed_key_char == '*')
		{
			current_app_state = MENU_STATE_PAGE_2;
		}
	}
}
 8000942:	e00c      	b.n	800095e <app_menu_state_page_3+0xaa>
		else if(pressed_key_char == '#')
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	2b23      	cmp	r3, #35	; 0x23
 8000948:	d103      	bne.n	8000952 <app_menu_state_page_3+0x9e>
			current_app_state = MENU_STATE_PAGE_4;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <app_menu_state_page_3+0xc8>)
 800094c:	2207      	movs	r2, #7
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	e005      	b.n	800095e <app_menu_state_page_3+0xaa>
		else if(pressed_key_char == '*')
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b2a      	cmp	r3, #42	; 0x2a
 8000956:	d102      	bne.n	800095e <app_menu_state_page_3+0xaa>
			current_app_state = MENU_STATE_PAGE_2;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <app_menu_state_page_3+0xc8>)
 800095a:	2205      	movs	r2, #5
 800095c:	701a      	strb	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	08006e58 	.word	0x08006e58
 8000970:	08006e6c 	.word	0x08006e6c
 8000974:	20000758 	.word	0x20000758
 8000978:	2000006a 	.word	0x2000006a
 800097c:	20000068 	.word	0x20000068

08000980 <app_menu_state_page_4>:

void app_menu_state_page_4(I2C_HandleTypeDef *i2c_handle){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if(prev_app_state != MENU_STATE_PAGE_4)
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <app_menu_state_page_4+0xb4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d021      	beq.n	80009d4 <app_menu_state_page_4+0x54>
	{
		lcd_clear(i2c_handle);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 ffef 	bl	8001974 <lcd_clear>
		lcd_send_text("Settings   [4/4]", i2c_handle);
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4827      	ldr	r0, [pc, #156]	; (8000a38 <app_menu_state_page_4+0xb8>)
 800099a:	f000 fffa 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	20c0      	movs	r0, #192	; 0xc0
 80009a2:	f000 ff5f 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Clear database", i2c_handle);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4824      	ldr	r0, [pc, #144]	; (8000a3c <app_menu_state_page_4+0xbc>)
 80009aa:	f000 fff2 	bl	8001992 <lcd_send_text>
		prev_app_state = MENU_STATE_PAGE_4;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <app_menu_state_page_4+0xb4>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_MENU_PAGE_IDLE_TIME;
 80009b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <app_menu_state_page_4+0xc0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 80009c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <app_menu_state_page_4+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = DEFAULT_STATE;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <app_menu_state_page_4+0xc4>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d102      	bne.n	80009e2 <app_menu_state_page_4+0x62>
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <app_menu_state_page_4+0xc8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 80009e2:	f000 ff23 	bl	800182c <keypad_scan_pressed_index_filtered>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d01a      	beq.n	8000a2a <app_menu_state_page_4+0xaa>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 80009f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fefb 	bl	80017f4 <keypad_index_to_char>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '0')
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b30      	cmp	r3, #48	; 0x30
 8000a06:	d103      	bne.n	8000a10 <app_menu_state_page_4+0x90>
		{
			current_app_state = CLEAR_DATABASE_STATE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <app_menu_state_page_4+0xc8>)
 8000a0a:	220b      	movs	r2, #11
 8000a0c:	701a      	strb	r2, [r3, #0]
		else if(pressed_key_char == '*')
		{
			current_app_state = MENU_STATE_PAGE_3;
		}
	}
}
 8000a0e:	e00c      	b.n	8000a2a <app_menu_state_page_4+0xaa>
		else if(pressed_key_char == '#')
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	2b23      	cmp	r3, #35	; 0x23
 8000a14:	d103      	bne.n	8000a1e <app_menu_state_page_4+0x9e>
			current_app_state = MENU_STATE_PAGE_1;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <app_menu_state_page_4+0xc8>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	e005      	b.n	8000a2a <app_menu_state_page_4+0xaa>
		else if(pressed_key_char == '*')
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	2b2a      	cmp	r3, #42	; 0x2a
 8000a22:	d102      	bne.n	8000a2a <app_menu_state_page_4+0xaa>
			current_app_state = MENU_STATE_PAGE_3;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <app_menu_state_page_4+0xc8>)
 8000a26:	2206      	movs	r2, #6
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08006e7c 	.word	0x08006e7c
 8000a3c:	08006e90 	.word	0x08006e90
 8000a40:	20000758 	.word	0x20000758
 8000a44:	2000006a 	.word	0x2000006a
 8000a48:	20000068 	.word	0x20000068

08000a4c <app_add_user_state>:

void app_add_user_state(I2C_HandleTypeDef *i2c_handle){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if(prev_app_state != ADD_USER_STATE)
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <app_add_user_state+0xe8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d026      	beq.n	8000aaa <app_add_user_state+0x5e>
	{
		lcd_clear(i2c_handle);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 ff89 	bl	8001974 <lcd_clear>
		lcd_send_text("Add user:", i2c_handle);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	4834      	ldr	r0, [pc, #208]	; (8000b38 <app_add_user_state+0xec>)
 8000a66:	f000 ff94 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	20c0      	movs	r0, #192	; 0xc0
 8000a6e:	f000 fef9 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Place card to add", i2c_handle);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4831      	ldr	r0, [pc, #196]	; (8000b3c <app_add_user_state+0xf0>)
 8000a76:	f000 ff8c 	bl	8001992 <lcd_send_text>
		prev_app_state = ADD_USER_STATE;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <app_add_user_state+0xe8>)
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_ADD_USER_IDLE_TIME;
 8000a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a84:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <app_add_user_state+0xf4>)
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <app_add_user_state+0xf8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 8000a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <app_add_user_state+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		uart_flag = 0;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <app_add_user_state+0x100>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	; 0x64
 8000aa6:	f001 fc6b 	bl	8002380 <HAL_Delay>
	}

	if(tim_flag == 1) current_app_state = MENU_STATE_PAGE_1;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <app_add_user_state+0xfc>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d102      	bne.n	8000ab8 <app_add_user_state+0x6c>
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <app_add_user_state+0x104>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	701a      	strb	r2, [r3, #0]

	if(uart_flag == 1)
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <app_add_user_state+0x100>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d136      	bne.n	8000b2e <app_add_user_state+0xe2>
	{
		uart_flag = 0;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <app_add_user_state+0x100>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		if(find_tag(RFID_buffer + 7))
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <app_add_user_state+0x108>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fc7f 	bl	80013cc <find_tag>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d016      	beq.n	8000b02 <app_add_user_state+0xb6>
		{
			lcd_clear(i2c_handle);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 ff4d 	bl	8001974 <lcd_clear>
			lcd_send_text("User already", i2c_handle);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	481e      	ldr	r0, [pc, #120]	; (8000b58 <app_add_user_state+0x10c>)
 8000ade:	f000 ff58 	bl	8001992 <lcd_send_text>
			lcd_send_cmd(0xC0, i2c_handle);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	20c0      	movs	r0, #192	; 0xc0
 8000ae6:	f000 febd 	bl	8001864 <lcd_send_cmd>
			lcd_send_text("exists", i2c_handle);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <app_add_user_state+0x110>)
 8000aee:	f000 ff50 	bl	8001992 <lcd_send_text>
			HAL_Delay(USER_ALREADY_EXISTS_SCREEN_TIME_MS);
 8000af2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000af6:	f001 fc43 	bl	8002380 <HAL_Delay>
			current_app_state = MENU_STATE_PAGE_1;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <app_add_user_state+0x104>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	701a      	strb	r2, [r3, #0]
			return;
 8000b00:	e015      	b.n	8000b2e <app_add_user_state+0xe2>
		}
		flash_add_new_tag(RFID_buffer + 7);
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <app_add_user_state+0x108>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fcaf 	bl	8001468 <flash_add_new_tag>
		flash_update_memory_content();
 8000b0a:	f000 fd17 	bl	800153c <flash_update_memory_content>
		flash_download_tag_data();
 8000b0e:	f000 fc09 	bl	8001324 <flash_download_tag_data>
		lcd_clear(i2c_handle);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 ff2e 	bl	8001974 <lcd_clear>
		lcd_send_text("New user added", i2c_handle);
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <app_add_user_state+0x114>)
 8000b1c:	f000 ff39 	bl	8001992 <lcd_send_text>
		HAL_Delay(NEW_USER_ADDED_SCREEN_TIME_MS);
 8000b20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b24:	f001 fc2c 	bl	8002380 <HAL_Delay>
		current_app_state = MENU_STATE_PAGE_1;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <app_add_user_state+0x104>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	08006ea0 	.word	0x08006ea0
 8000b3c:	08006eac 	.word	0x08006eac
 8000b40:	00011170 	.word	0x00011170
 8000b44:	20000758 	.word	0x20000758
 8000b48:	2000006a 	.word	0x2000006a
 8000b4c:	2000006b 	.word	0x2000006b
 8000b50:	20000068 	.word	0x20000068
 8000b54:	20000077 	.word	0x20000077
 8000b58:	08006ec0 	.word	0x08006ec0
 8000b5c:	08006ed0 	.word	0x08006ed0
 8000b60:	08006ed8 	.word	0x08006ed8

08000b64 <app_delete_user_state>:

void app_delete_user_state(I2C_HandleTypeDef *i2c_handle){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if(prev_app_state != DELETE_USER_STATE)
 8000b6c:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <app_delete_user_state+0xdc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	d023      	beq.n	8000bbc <app_delete_user_state+0x58>
	{
		lcd_clear(i2c_handle);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fefd 	bl	8001974 <lcd_clear>
		lcd_send_text("Delete user:", i2c_handle);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	4831      	ldr	r0, [pc, #196]	; (8000c44 <app_delete_user_state+0xe0>)
 8000b7e:	f000 ff08 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	20c0      	movs	r0, #192	; 0xc0
 8000b86:	f000 fe6d 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("Place card to read", i2c_handle);
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	482e      	ldr	r0, [pc, #184]	; (8000c48 <app_delete_user_state+0xe4>)
 8000b8e:	f000 ff00 	bl	8001992 <lcd_send_text>
		prev_app_state = DELETE_USER_STATE;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <app_delete_user_state+0xdc>)
 8000b94:	2209      	movs	r2, #9
 8000b96:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_DELETE_USER_IDLE_TIME;
 8000b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <app_delete_user_state+0xe8>)
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <app_delete_user_state+0xec>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 8000ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <app_delete_user_state+0xf0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
		uart_flag = 0;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <app_delete_user_state+0xf4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = MENU_STATE_PAGE_2;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <app_delete_user_state+0xf0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <app_delete_user_state+0x66>
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <app_delete_user_state+0xf8>)
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	701a      	strb	r2, [r3, #0]

	if(uart_flag == 1)
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <app_delete_user_state+0xf4>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d132      	bne.n	8000c38 <app_delete_user_state+0xd4>
	{
		uart_flag = 0;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <app_delete_user_state+0xf4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		if(!flash_remove_tag(RFID_buffer + 7))
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <app_delete_user_state+0xfc>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fc6a 	bl	80014b4 <flash_remove_tag>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d116      	bne.n	8000c14 <app_delete_user_state+0xb0>
		{
			lcd_clear(i2c_handle);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 fec4 	bl	8001974 <lcd_clear>
			lcd_send_text("User does not", i2c_handle);
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	481d      	ldr	r0, [pc, #116]	; (8000c64 <app_delete_user_state+0x100>)
 8000bf0:	f000 fecf 	bl	8001992 <lcd_send_text>
			lcd_send_cmd(0xC0, i2c_handle);
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	20c0      	movs	r0, #192	; 0xc0
 8000bf8:	f000 fe34 	bl	8001864 <lcd_send_cmd>
			lcd_send_text("exists", i2c_handle);
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <app_delete_user_state+0x104>)
 8000c00:	f000 fec7 	bl	8001992 <lcd_send_text>
			HAL_Delay(USER_DOESNT_EXISTS_SCREEN_TIME_MS);
 8000c04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c08:	f001 fbba 	bl	8002380 <HAL_Delay>
			current_app_state = MENU_STATE_PAGE_2;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <app_delete_user_state+0xf8>)
 8000c0e:	2205      	movs	r2, #5
 8000c10:	701a      	strb	r2, [r3, #0]
			return;
 8000c12:	e011      	b.n	8000c38 <app_delete_user_state+0xd4>
		}
		flash_update_memory_content();
 8000c14:	f000 fc92 	bl	800153c <flash_update_memory_content>
		flash_download_tag_data();
 8000c18:	f000 fb84 	bl	8001324 <flash_download_tag_data>
		lcd_clear(i2c_handle);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 fea9 	bl	8001974 <lcd_clear>
		lcd_send_text("User removed", i2c_handle);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <app_delete_user_state+0x108>)
 8000c26:	f000 feb4 	bl	8001992 <lcd_send_text>
		HAL_Delay(USER_REMOVED_SCREEN_TIME_MS);
 8000c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c2e:	f001 fba7 	bl	8002380 <HAL_Delay>
		current_app_state = MENU_STATE_PAGE_2;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <app_delete_user_state+0xf8>)
 8000c34:	2205      	movs	r2, #5
 8000c36:	701a      	strb	r2, [r3, #0]
	}
}
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000
 8000c44:	08006ee8 	.word	0x08006ee8
 8000c48:	08006ef8 	.word	0x08006ef8
 8000c4c:	00011170 	.word	0x00011170
 8000c50:	20000758 	.word	0x20000758
 8000c54:	2000006a 	.word	0x2000006a
 8000c58:	2000006b 	.word	0x2000006b
 8000c5c:	20000068 	.word	0x20000068
 8000c60:	20000077 	.word	0x20000077
 8000c64:	08006f0c 	.word	0x08006f0c
 8000c68:	08006ed0 	.word	0x08006ed0
 8000c6c:	08006f1c 	.word	0x08006f1c

08000c70 <app_change_password_state>:

void app_change_password_state(I2C_HandleTypeDef *i2c_handle){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(prev_app_state != CHANGE_PASSWORD_STATE)
 8000c78:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <app_change_password_state+0xf8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b0a      	cmp	r3, #10
 8000c7e:	d024      	beq.n	8000cca <app_change_password_state+0x5a>
	{
		lcd_clear(i2c_handle);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 fe77 	bl	8001974 <lcd_clear>
		lcd_send_text("New password:", i2c_handle);
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	4838      	ldr	r0, [pc, #224]	; (8000d6c <app_change_password_state+0xfc>)
 8000c8a:	f000 fe82 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	20c0      	movs	r0, #192	; 0xc0
 8000c92:	f000 fde7 	bl	8001864 <lcd_send_cmd>
		password_buffer_index = 0;
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <app_change_password_state+0x100>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
		prev_app_state = CHANGE_PASSWORD_STATE;
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <app_change_password_state+0xf8>)
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_CHANGE_PASSWORD_IDLE_TIME;
 8000ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca6:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <app_change_password_state+0x104>)
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <app_change_password_state+0x108>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 8000cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <app_change_password_state+0x10c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]

		memcpy(temp_password_buffor, flash_correct_password_buffor, 4);
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <app_change_password_state+0x110>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <app_change_password_state+0x114>)
 8000cc8:	601a      	str	r2, [r3, #0]
	}

	if(tim_flag == 1){
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <app_change_password_state+0x10c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <app_change_password_state+0x72>
		current_app_state = DEFAULT_STATE;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <app_change_password_state+0x118>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		memcpy(flash_correct_password_buffor, temp_password_buffor, 4);
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <app_change_password_state+0x114>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <app_change_password_state+0x110>)
 8000ce0:	601a      	str	r2, [r3, #0]
	}

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 8000ce2:	f000 fda3 	bl	800182c <keypad_scan_pressed_index_filtered>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf2:	d036      	beq.n	8000d62 <app_change_password_state+0xf2>
	{
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <app_change_password_state+0x108>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fd77 	bl	80017f4 <keypad_index_to_char>
 8000d06:	4603      	mov	r3, r0
 8000d08:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '#' || pressed_key_char == '*') return;
 8000d0a:	7bbb      	ldrb	r3, [r7, #14]
 8000d0c:	2b23      	cmp	r3, #35	; 0x23
 8000d0e:	d027      	beq.n	8000d60 <app_change_password_state+0xf0>
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	2b2a      	cmp	r3, #42	; 0x2a
 8000d14:	d024      	beq.n	8000d60 <app_change_password_state+0xf0>
		lcd_send_data('*', i2c_handle);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	202a      	movs	r0, #42	; 0x2a
 8000d1a:	f000 fdd1 	bl	80018c0 <lcd_send_data>
		flash_correct_password_buffor[password_buffer_index++] = pressed_key_char;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <app_change_password_state+0x100>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b2d1      	uxtb	r1, r2
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <app_change_password_state+0x100>)
 8000d28:	7011      	strb	r1, [r2, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <app_change_password_state+0x110>)
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	5453      	strb	r3, [r2, r1]
		if(password_buffer_index > 3)
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <app_change_password_state+0x100>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d913      	bls.n	8000d62 <app_change_password_state+0xf2>
		{
			flash_update_memory_content();
 8000d3a:	f000 fbff 	bl	800153c <flash_update_memory_content>
			flash_download_tag_data();
 8000d3e:	f000 faf1 	bl	8001324 <flash_download_tag_data>
			lcd_clear(i2c_handle);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fe16 	bl	8001974 <lcd_clear>
			lcd_send_text("Password changed", i2c_handle);
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <app_change_password_state+0x11c>)
 8000d4c:	f000 fe21 	bl	8001992 <lcd_send_text>
			HAL_Delay(PASSWORD_CHANGED_SCREEN_TIMR_MS);
 8000d50:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d54:	f001 fb14 	bl	8002380 <HAL_Delay>
			current_app_state = MENU_STATE_PAGE_3;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <app_change_password_state+0x118>)
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e000      	b.n	8000d62 <app_change_password_state+0xf2>
		if(pressed_key_char == '#' || pressed_key_char == '*') return;
 8000d60:	bf00      	nop
		}
	}

}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	08006f2c 	.word	0x08006f2c
 8000d70:	20000069 	.word	0x20000069
 8000d74:	00011170 	.word	0x00011170
 8000d78:	20000758 	.word	0x20000758
 8000d7c:	2000006a 	.word	0x2000006a
 8000d80:	20000088 	.word	0x20000088
 8000d84:	20000084 	.word	0x20000084
 8000d88:	20000068 	.word	0x20000068
 8000d8c:	08006f3c 	.word	0x08006f3c

08000d90 <app_clear_database_state>:

void app_clear_database_state(I2C_HandleTypeDef *i2c_handle){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	if(prev_app_state != CLEAR_DATABASE_STATE)
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <app_clear_database_state+0xd0>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b0b      	cmp	r3, #11
 8000d9e:	d024      	beq.n	8000dea <app_clear_database_state+0x5a>
	{
		lcd_clear(i2c_handle);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fde7 	bl	8001974 <lcd_clear>
		lcd_send_text("Are you sure?", i2c_handle);
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	482e      	ldr	r0, [pc, #184]	; (8000e64 <app_clear_database_state+0xd4>)
 8000daa:	f000 fdf2 	bl	8001992 <lcd_send_text>
		lcd_send_cmd(0xC0, i2c_handle);
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	20c0      	movs	r0, #192	; 0xc0
 8000db2:	f000 fd57 	bl	8001864 <lcd_send_cmd>
		lcd_send_text("0 - yes", i2c_handle);
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	482b      	ldr	r0, [pc, #172]	; (8000e68 <app_clear_database_state+0xd8>)
 8000dba:	f000 fdea 	bl	8001992 <lcd_send_text>
		password_buffer_index = 0;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <app_clear_database_state+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
		prev_app_state = CLEAR_DATABASE_STATE;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <app_clear_database_state+0xd0>)
 8000dc6:	220b      	movs	r2, #11
 8000dc8:	701a      	strb	r2, [r3, #0]

		TIM2->ARR = MAX_CLEAR_DATABASE_IDLE_TIME;
 8000dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dce:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COUNTER(&tim2, 1);
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <app_clear_database_state+0xe0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 1;
 8000ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
		tim_flag = 0;
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <app_clear_database_state+0xe4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
	}

	if(tim_flag == 1) current_app_state = MENU_STATE_PAGE_4;
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <app_clear_database_state+0xe4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d102      	bne.n	8000df8 <app_clear_database_state+0x68>
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <app_clear_database_state+0xe8>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	701a      	strb	r2, [r3, #0]

	int8_t pressed_key_index = keypad_scan_pressed_index_filtered();
 8000df8:	f000 fd18 	bl	800182c <keypad_scan_pressed_index_filtered>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
	if(pressed_key_index != NO_BUTTON_PRESSED)
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d027      	beq.n	8000e5a <app_clear_database_state+0xca>
	{
		char pressed_key_char = keypad_index_to_char(pressed_key_index);
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fcf0 	bl	80017f4 <keypad_index_to_char>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73bb      	strb	r3, [r7, #14]
		if(pressed_key_char == '0'){
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	2b30      	cmp	r3, #48	; 0x30
 8000e1c:	d11a      	bne.n	8000e54 <app_clear_database_state+0xc4>
			flash_clear_database_wo_password();
 8000e1e:	f000 fc51 	bl	80016c4 <flash_clear_database_wo_password>
			flash_download_tag_data();
 8000e22:	f000 fa7f 	bl	8001324 <flash_download_tag_data>
			lcd_clear(i2c_handle);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fda4 	bl	8001974 <lcd_clear>
			lcd_send_text("Database is", i2c_handle);
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <app_clear_database_state+0xec>)
 8000e30:	f000 fdaf 	bl	8001992 <lcd_send_text>
			lcd_send_cmd(0xC0, i2c_handle);
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	20c0      	movs	r0, #192	; 0xc0
 8000e38:	f000 fd14 	bl	8001864 <lcd_send_cmd>
			lcd_send_text("empty", i2c_handle);
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <app_clear_database_state+0xf0>)
 8000e40:	f000 fda7 	bl	8001992 <lcd_send_text>
			HAL_Delay(USER_ALREADY_EXISTS_SCREEN_TIME_MS);
 8000e44:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e48:	f001 fa9a 	bl	8002380 <HAL_Delay>
			current_app_state = MENU_STATE_PAGE_4;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <app_clear_database_state+0xe8>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	701a      	strb	r2, [r3, #0]
			return;
 8000e52:	e002      	b.n	8000e5a <app_clear_database_state+0xca>
		}
		else{
			current_app_state = MENU_STATE_PAGE_4;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <app_clear_database_state+0xe8>)
 8000e56:	2207      	movs	r2, #7
 8000e58:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	08006f50 	.word	0x08006f50
 8000e68:	08006f60 	.word	0x08006f60
 8000e6c:	20000069 	.word	0x20000069
 8000e70:	20000758 	.word	0x20000758
 8000e74:	2000006a 	.word	0x2000006a
 8000e78:	20000068 	.word	0x20000068
 8000e7c:	08006f68 	.word	0x08006f68
 8000e80:	08006f74 	.word	0x08006f74

08000e84 <app_is_password_correct>:

uint8_t app_is_password_correct(){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e00e      	b.n	8000eae <app_is_password_correct+0x2a>
		if(password_buffer[i] != flash_correct_password_buffor[i]) return 0;
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <app_is_password_correct+0x40>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	490b      	ldr	r1, [pc, #44]	; (8000ec8 <app_is_password_correct+0x44>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d001      	beq.n	8000ea8 <app_is_password_correct+0x24>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e006      	b.n	8000eb6 <app_is_password_correct+0x32>
	for(int i = 0; i < 4; i++){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	dded      	ble.n	8000e90 <app_is_password_correct+0xc>
	}
	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000080 	.word	0x20000080
 8000ec8:	20000088 	.word	0x20000088

08000ecc <app_main_loop>:

void app_main_loop(I2C_HandleTypeDef *i2c_handle){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	switch(current_app_state)
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <app_main_loop+0xa0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0b      	cmp	r3, #11
 8000eda:	d843      	bhi.n	8000f64 <app_main_loop+0x98>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <app_main_loop+0x18>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f1d 	.word	0x08000f1d
 8000eec:	08000f65 	.word	0x08000f65
 8000ef0:	08000f65 	.word	0x08000f65
 8000ef4:	08000f25 	.word	0x08000f25
 8000ef8:	08000f2d 	.word	0x08000f2d
 8000efc:	08000f35 	.word	0x08000f35
 8000f00:	08000f3d 	.word	0x08000f3d
 8000f04:	08000f4d 	.word	0x08000f4d
 8000f08:	08000f55 	.word	0x08000f55
 8000f0c:	08000f45 	.word	0x08000f45
 8000f10:	08000f5d 	.word	0x08000f5d
	{
	case DEFAULT_STATE:
		app_default_state(i2c_handle);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fad7 	bl	80004c8 <app_default_state>
		break;
 8000f1a:	e023      	b.n	8000f64 <app_main_loop+0x98>
	case WRITE_PASSWORD_STATE:
		app_write_password_state(i2c_handle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fb69 	bl	80005f4 <app_write_password_state>
		break;
 8000f22:	e01f      	b.n	8000f64 <app_main_loop+0x98>
	case MENU_STATE_PAGE_1:
		app_menu_state_page_1(i2c_handle);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fbf9 	bl	800071c <app_menu_state_page_1>
		break;
 8000f2a:	e01b      	b.n	8000f64 <app_main_loop+0x98>
	case MENU_STATE_PAGE_2:
		app_menu_state_page_2(i2c_handle);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fc5b 	bl	80007e8 <app_menu_state_page_2>
		break;
 8000f32:	e017      	b.n	8000f64 <app_main_loop+0x98>
	case MENU_STATE_PAGE_3:
		app_menu_state_page_3(i2c_handle);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fcbd 	bl	80008b4 <app_menu_state_page_3>
		break;
 8000f3a:	e013      	b.n	8000f64 <app_main_loop+0x98>
	case MENU_STATE_PAGE_4:
		app_menu_state_page_4(i2c_handle);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fd1f 	bl	8000980 <app_menu_state_page_4>
		break;
 8000f42:	e00f      	b.n	8000f64 <app_main_loop+0x98>
	case CHANGE_PASSWORD_STATE:
		app_change_password_state(i2c_handle);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fe93 	bl	8000c70 <app_change_password_state>
		break;
 8000f4a:	e00b      	b.n	8000f64 <app_main_loop+0x98>
	case ADD_USER_STATE:
		app_add_user_state(i2c_handle);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fd7d 	bl	8000a4c <app_add_user_state>
		break;
 8000f52:	e007      	b.n	8000f64 <app_main_loop+0x98>
	case DELETE_USER_STATE:
		app_delete_user_state(i2c_handle);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fe05 	bl	8000b64 <app_delete_user_state>
		break;
 8000f5a:	e003      	b.n	8000f64 <app_main_loop+0x98>
	case CLEAR_DATABASE_STATE:
		app_clear_database_state(i2c_handle);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff17 	bl	8000d90 <app_clear_database_state>
		break;
 8000f62:	bf00      	nop
	}
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000068 	.word	0x20000068

08000f70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	TIM2->CR1 = 0;
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	tim_flag = 1;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000006a 	.word	0x2000006a

08000f98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uart_flag = 1;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_UART_RxCpltCallback+0x20>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(huart, RFID_buffer, RFID_FRAME_SIZE);
 8000fa6:	220e      	movs	r2, #14
 8000fa8:	4904      	ldr	r1, [pc, #16]	; (8000fbc <HAL_UART_RxCpltCallback+0x24>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f004 ffd4 	bl	8005f58 <HAL_UART_Receive_IT>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000006b 	.word	0x2000006b
 8000fbc:	20000070 	.word	0x20000070

08000fc0 <flash_init>:
uint8_t flash_tag_count = 0;
uint8_t flash_tag_proxy_count = 0;
char flash_correct_password_buffor[4];

void flash_init()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fd0b 	bl	80029e8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f001 f9d4 	bl	8002380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f001 fd02 	bl	80029e8 <HAL_GPIO_WritePin>
	data = 0x50;
 8000fe4:	2350      	movs	r3, #80	; 0x50
 8000fe6:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8000fe8:	1df9      	adds	r1, r7, #7
 8000fea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <flash_init+0x94>)
 8000ff2:	f003 fc5c 	bl	80048ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f001 fcf3 	bl	80029e8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001002:	2002      	movs	r0, #2
 8001004:	f001 f9bc 	bl	8002380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 fcea 	bl	80029e8 <HAL_GPIO_WritePin>
	data = 0x01;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001018:	1df9      	adds	r1, r7, #7
 800101a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800101e:	2201      	movs	r2, #1
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <flash_init+0x94>)
 8001022:	f003 fc44 	bl	80048ae <HAL_SPI_Transmit>
	data = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 800102a:	1df9      	adds	r1, r7, #7
 800102c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001030:	2201      	movs	r2, #1
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <flash_init+0x94>)
 8001034:	f003 fc3b 	bl	80048ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f001 fcd2 	bl	80029e8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f001 f99b 	bl	8002380 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200008d4 	.word	0x200008d4

08001058 <flash_wren>:

void flash_wren()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2110      	movs	r1, #16
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f001 fcbf 	bl	80029e8 <HAL_GPIO_WritePin>
	uint8_t data = 0x06;
 800106a:	2306      	movs	r3, #6
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 800106e:	1df9      	adds	r1, r7, #7
 8001070:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001074:	2201      	movs	r2, #1
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <flash_wren+0x38>)
 8001078:	f003 fc19 	bl	80048ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2110      	movs	r1, #16
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fcb0 	bl	80029e8 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200008d4 	.word	0x200008d4

08001094 <flash_write_byte>:

void flash_write_byte(uint8_t data_t, uint16_t addres)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	80bb      	strh	r3, [r7, #4]
	flash_wren();
 80010a4:	f7ff ffd8 	bl	8001058 <flash_wren>

	uint8_t data;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 fc9a 	bl	80029e8 <HAL_GPIO_WritePin>
	data = 0x02;
 80010b4:	2302      	movs	r3, #2
 80010b6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80010b8:	f107 010f 	add.w	r1, r7, #15
 80010bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c0:	2201      	movs	r2, #1
 80010c2:	4820      	ldr	r0, [pc, #128]	; (8001144 <flash_write_byte+0xb0>)
 80010c4:	f003 fbf3 	bl	80048ae <HAL_SPI_Transmit>
	data = MAIN_SECTION_ADDRES;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80010cc:	f107 010f 	add.w	r1, r7, #15
 80010d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010d4:	2201      	movs	r2, #1
 80010d6:	481b      	ldr	r0, [pc, #108]	; (8001144 <flash_write_byte+0xb0>)
 80010d8:	f003 fbe9 	bl	80048ae <HAL_SPI_Transmit>
	data = (addres & 0xff00) >> 8;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ee:	2201      	movs	r2, #1
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <flash_write_byte+0xb0>)
 80010f2:	f003 fbdc 	bl	80048ae <HAL_SPI_Transmit>
	data = addres & 0x00ff;
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80010fc:	f107 010f 	add.w	r1, r7, #15
 8001100:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001104:	2201      	movs	r2, #1
 8001106:	480f      	ldr	r0, [pc, #60]	; (8001144 <flash_write_byte+0xb0>)
 8001108:	f003 fbd1 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&spi1, &data_t, 1, 500);
 800110c:	1df9      	adds	r1, r7, #7
 800110e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001112:	2201      	movs	r2, #1
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <flash_write_byte+0xb0>)
 8001116:	f003 fbca 	bl	80048ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 fc61 	bl	80029e8 <HAL_GPIO_WritePin>

	while(flash_read_status_register() & 1) HAL_Delay(1);
 8001126:	e002      	b.n	800112e <flash_write_byte+0x9a>
 8001128:	2001      	movs	r0, #1
 800112a:	f001 f929 	bl	8002380 <HAL_Delay>
 800112e:	f000 f857 	bl	80011e0 <flash_read_status_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f5      	bne.n	8001128 <flash_write_byte+0x94>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200008d4 	.word	0x200008d4

08001148 <flash_read_byte>:

uint8_t flash_read_byte(uint16_t addres)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f001 fc45 	bl	80029e8 <HAL_GPIO_WritePin>
	data = 0x03;
 800115e:	2303      	movs	r3, #3
 8001160:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001162:	f107 010f 	add.w	r1, r7, #15
 8001166:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800116a:	2201      	movs	r2, #1
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <flash_read_byte+0x94>)
 800116e:	f003 fb9e 	bl	80048ae <HAL_SPI_Transmit>
	data = MAIN_SECTION_ADDRES;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001176:	f107 010f 	add.w	r1, r7, #15
 800117a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800117e:	2201      	movs	r2, #1
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <flash_read_byte+0x94>)
 8001182:	f003 fb94 	bl	80048ae <HAL_SPI_Transmit>
	data = (addres & 0xff00) >> 8;
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001190:	f107 010f 	add.w	r1, r7, #15
 8001194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001198:	2201      	movs	r2, #1
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <flash_read_byte+0x94>)
 800119c:	f003 fb87 	bl	80048ae <HAL_SPI_Transmit>
	data = addres & 0x00ff;
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80011a6:	f107 010f 	add.w	r1, r7, #15
 80011aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ae:	2201      	movs	r2, #1
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <flash_read_byte+0x94>)
 80011b2:	f003 fb7c 	bl	80048ae <HAL_SPI_Transmit>

	HAL_SPI_Receive(&spi1, &data, 1, 500);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011be:	2201      	movs	r2, #1
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <flash_read_byte+0x94>)
 80011c2:	f003 fce2 	bl	8004b8a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2110      	movs	r1, #16
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f001 fc0b 	bl	80029e8 <HAL_GPIO_WritePin>
	return data;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200008d4 	.word	0x200008d4

080011e0 <flash_read_status_register>:

uint8_t flash_read_status_register()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f001 fbfb 	bl	80029e8 <HAL_GPIO_WritePin>
	uint8_t data = 0x05;
 80011f2:	2305      	movs	r3, #5
 80011f4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80011f6:	1df9      	adds	r1, r7, #7
 80011f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011fc:	2201      	movs	r2, #1
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <flash_read_status_register+0x48>)
 8001200:	f003 fb55 	bl	80048ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(&spi1, &data, 1, 500);
 8001204:	1df9      	adds	r1, r7, #7
 8001206:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120a:	2201      	movs	r2, #1
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <flash_read_status_register+0x48>)
 800120e:	f003 fcbc 	bl	8004b8a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2110      	movs	r1, #16
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f001 fbe5 	bl	80029e8 <HAL_GPIO_WritePin>
	return data;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200008d4 	.word	0x200008d4

0800122c <flash_write_byte_array>:

void flash_write_byte_array(uint8_t *data_t, uint8_t size, uint16_t addres)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
	for(int i = 0; i < size; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e00d      	b.n	800125e <flash_write_byte_array+0x32>
	{
		flash_write_byte(data_t[i], addres++);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	1c59      	adds	r1, r3, #1
 800124e:	8039      	strh	r1, [r7, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff ff1e 	bl	8001094 <flash_write_byte>
	for(int i = 0; i < size; i++)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbed      	blt.n	8001242 <flash_write_byte_array+0x16>
	}
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <flash_read_byte_array>:

void flash_read_byte_array(uint8_t *dest, uint8_t size, uint16_t addres)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	803b      	strh	r3, [r7, #0]
	uint8_t data;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2110      	movs	r1, #16
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f001 fbae 	bl	80029e8 <HAL_GPIO_WritePin>
	data = 0x03;
 800128c:	2303      	movs	r3, #3
 800128e:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001290:	f107 010b 	add.w	r1, r7, #11
 8001294:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001298:	2201      	movs	r2, #1
 800129a:	4821      	ldr	r0, [pc, #132]	; (8001320 <flash_read_byte_array+0xb0>)
 800129c:	f003 fb07 	bl	80048ae <HAL_SPI_Transmit>
	data = MAIN_SECTION_ADDRES;
 80012a0:	2301      	movs	r3, #1
 80012a2:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80012a4:	f107 010b 	add.w	r1, r7, #11
 80012a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ac:	2201      	movs	r2, #1
 80012ae:	481c      	ldr	r0, [pc, #112]	; (8001320 <flash_read_byte_array+0xb0>)
 80012b0:	f003 fafd 	bl	80048ae <HAL_SPI_Transmit>
	data = (addres & 0xff00) >> 8;
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80012be:	f107 010b 	add.w	r1, r7, #11
 80012c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c6:	2201      	movs	r2, #1
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <flash_read_byte_array+0xb0>)
 80012ca:	f003 faf0 	bl	80048ae <HAL_SPI_Transmit>
	data = addres & 0x00ff;
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 80012d4:	f107 010b 	add.w	r1, r7, #11
 80012d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012dc:	2201      	movs	r2, #1
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <flash_read_byte_array+0xb0>)
 80012e0:	f003 fae5 	bl	80048ae <HAL_SPI_Transmit>

	for(int i = 0; i < size; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e00b      	b.n	8001302 <flash_read_byte_array+0x92>
	{
		HAL_SPI_Receive(&spi1, &(dest[i]), 1, 500);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	18d1      	adds	r1, r2, r3
 80012f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f4:	2201      	movs	r2, #1
 80012f6:	480a      	ldr	r0, [pc, #40]	; (8001320 <flash_read_byte_array+0xb0>)
 80012f8:	f003 fc47 	bl	8004b8a <HAL_SPI_Receive>
	for(int i = 0; i < size; i++)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	429a      	cmp	r2, r3
 8001308:	dbef      	blt.n	80012ea <flash_read_byte_array+0x7a>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2110      	movs	r1, #16
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f001 fb69 	bl	80029e8 <HAL_GPIO_WritePin>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200008d4 	.word	0x200008d4

08001324 <flash_download_tag_data>:

void flash_download_tag_data()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	flash_correct_password_buffor[0] = flash_read_byte(TAG_PASSWORD_ADDRES);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ff0c 	bl	8001148 <flash_read_byte>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <flash_download_tag_data+0x98>)
 8001336:	701a      	strb	r2, [r3, #0]
	flash_correct_password_buffor[1] = flash_read_byte(TAG_PASSWORD_ADDRES + 1);
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff ff05 	bl	8001148 <flash_read_byte>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <flash_download_tag_data+0x98>)
 8001344:	705a      	strb	r2, [r3, #1]
	flash_correct_password_buffor[2] = flash_read_byte(TAG_PASSWORD_ADDRES + 2);
 8001346:	2003      	movs	r0, #3
 8001348:	f7ff fefe 	bl	8001148 <flash_read_byte>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <flash_download_tag_data+0x98>)
 8001352:	709a      	strb	r2, [r3, #2]
	flash_correct_password_buffor[3] = flash_read_byte(TAG_PASSWORD_ADDRES + 3);
 8001354:	2004      	movs	r0, #4
 8001356:	f7ff fef7 	bl	8001148 <flash_read_byte>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <flash_download_tag_data+0x98>)
 8001360:	70da      	strb	r2, [r3, #3]

	flash_tag_count = flash_read_byte(TAG_COUNT_ADDRES);
 8001362:	2010      	movs	r0, #16
 8001364:	f7ff fef0 	bl	8001148 <flash_read_byte>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <flash_download_tag_data+0x9c>)
 800136e:	701a      	strb	r2, [r3, #0]
	flash_tag_proxy_count = flash_tag_count;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <flash_download_tag_data+0x9c>)
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <flash_download_tag_data+0xa0>)
 8001376:	701a      	strb	r2, [r3, #0]
	uint16_t tag_addres = TAG_FIRST_ADDRES;
 8001378:	2320      	movs	r3, #32
 800137a:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < flash_tag_count; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	e011      	b.n	80013a6 <flash_download_tag_data+0x82>
	{
		flash_read_byte_array(flash_tag_buffor[i], 6, tag_addres);
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <flash_download_tag_data+0xa4>)
 800138e:	4413      	add	r3, r2
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	2106      	movs	r1, #6
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff6b 	bl	8001270 <flash_read_byte_array>
		tag_addres += 6;
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	3306      	adds	r3, #6
 800139e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < flash_tag_count; i++)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <flash_download_tag_data+0x9c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dbe7      	blt.n	8001382 <flash_download_tag_data+0x5e>
	}
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000088 	.word	0x20000088
 80013c0:	2000006c 	.word	0x2000006c
 80013c4:	2000006d 	.word	0x2000006d
 80013c8:	2000008c 	.word	0x2000008c

080013cc <find_tag>:

uint8_t find_tag(uint8_t *tag)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < flash_tag_count; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e013      	b.n	8001402 <find_tag+0x36>
	{
		if(flash_compare_tags(flash_tag_buffor[i], tag, 6)) return 1;
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <find_tag+0x4c>)
 80013e6:	4413      	add	r3, r2
 80013e8:	2206      	movs	r2, #6
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f817 	bl	8001420 <flash_compare_tags>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <find_tag+0x30>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e009      	b.n	8001410 <find_tag+0x44>
	for(int i = 0; i < flash_tag_count; i++)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <find_tag+0x50>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4293      	cmp	r3, r2
 800140c:	dbe5      	blt.n	80013da <find_tag+0xe>
	}
	return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000008c 	.word	0x2000008c
 800141c:	2000006c 	.word	0x2000006c

08001420 <flash_compare_tags>:

uint8_t flash_compare_tags(uint8_t *tag1, uint8_t *tag2, uint8_t size)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < size; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e00e      	b.n	8001452 <flash_compare_tags+0x32>
	{
		if(tag1[i] != tag2[i]) return 0;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	440b      	add	r3, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <flash_compare_tags+0x2c>
 8001448:	2300      	movs	r3, #0
 800144a:	e007      	b.n	800145c <flash_compare_tags+0x3c>
	for(int i = 0; i < size; i++)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbec      	blt.n	8001434 <flash_compare_tags+0x14>
	}
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <flash_add_new_tag>:

void flash_add_new_tag(uint8_t *tag)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	strcpy(flash_tag_buffor[flash_tag_count], tag);
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <flash_add_new_tag+0x40>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <flash_add_new_tag+0x44>)
 8001480:	4413      	add	r3, r2
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fc8c 	bl	8006da2 <strcpy>
	++flash_tag_count;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <flash_add_new_tag+0x40>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <flash_add_new_tag+0x40>)
 8001494:	701a      	strb	r2, [r3, #0]
	flash_tag_proxy_count = flash_tag_count;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <flash_add_new_tag+0x40>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <flash_add_new_tag+0x48>)
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000006c 	.word	0x2000006c
 80014ac:	2000008c 	.word	0x2000008c
 80014b0:	2000006d 	.word	0x2000006d

080014b4 <flash_remove_tag>:

uint8_t flash_remove_tag(uint8_t *tag)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < flash_tag_count; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e02d      	b.n	800151e <flash_remove_tag+0x6a>
	{
		if(flash_compare_tags(tag, flash_tag_buffor[i], 6))
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <flash_remove_tag+0x80>)
 80014ce:	4413      	add	r3, r2
 80014d0:	2206      	movs	r2, #6
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffa3 	bl	8001420 <flash_compare_tags>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d01b      	beq.n	8001518 <flash_remove_tag+0x64>
		{
			for(int q = 0; q < 6; q++) flash_tag_buffor[i][q] = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	e00d      	b.n	8001502 <flash_remove_tag+0x4e>
 80014e6:	4913      	ldr	r1, [pc, #76]	; (8001534 <flash_remove_tag+0x80>)
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18ca      	adds	r2, r1, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4413      	add	r3, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3301      	adds	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	ddee      	ble.n	80014e6 <flash_remove_tag+0x32>
			--flash_tag_count;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <flash_remove_tag+0x84>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <flash_remove_tag+0x84>)
 8001512:	701a      	strb	r2, [r3, #0]
			return 1;
 8001514:	2301      	movs	r3, #1
 8001516:	e009      	b.n	800152c <flash_remove_tag+0x78>
	for(int i = 0; i < flash_tag_count; i++)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <flash_remove_tag+0x84>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4293      	cmp	r3, r2
 8001528:	dbcb      	blt.n	80014c2 <flash_remove_tag+0xe>
		}
	}
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000008c 	.word	0x2000008c
 8001538:	2000006c 	.word	0x2000006c

0800153c <flash_update_memory_content>:

void flash_update_memory_content()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	flash_erase_block(MAIN_SECTION_ADDRES);
 8001542:	2001      	movs	r0, #1
 8001544:	f000 f856 	bl	80015f4 <flash_erase_block>

	flash_write_byte(flash_correct_password_buffor[0], TAG_PASSWORD_ADDRES);
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <flash_update_memory_content+0xa8>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fda0 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[1], TAG_PASSWORD_ADDRES + 1);
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <flash_update_memory_content+0xa8>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd9a 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[2], TAG_PASSWORD_ADDRES + 2);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <flash_update_memory_content+0xa8>)
 8001562:	789b      	ldrb	r3, [r3, #2]
 8001564:	2103      	movs	r1, #3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd94 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[3], TAG_PASSWORD_ADDRES + 3);
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <flash_update_memory_content+0xa8>)
 800156e:	78db      	ldrb	r3, [r3, #3]
 8001570:	2104      	movs	r1, #4
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd8e 	bl	8001094 <flash_write_byte>

	flash_write_byte(flash_tag_count, TAG_COUNT_ADDRES);
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <flash_update_memory_content+0xac>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2110      	movs	r1, #16
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd88 	bl	8001094 <flash_write_byte>
	uint16_t tag_addres = TAG_FIRST_ADDRES;
 8001584:	2320      	movs	r3, #32
 8001586:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < flash_tag_proxy_count; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	e020      	b.n	80015d0 <flash_update_memory_content+0x94>
	{
		if(is_tag_removed(flash_tag_buffor[i])) continue;
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <flash_update_memory_content+0xb0>)
 800159a:	4413      	add	r3, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f875 	bl	800168c <is_tag_removed>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <flash_update_memory_content+0x8c>
		flash_write_byte_array(flash_tag_buffor[i], 6, tag_addres);
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <flash_update_memory_content+0xb0>)
 80015b4:	4413      	add	r3, r2
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	2106      	movs	r1, #6
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fe36 	bl	800122c <flash_write_byte_array>
		tag_addres += 6;
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	3306      	adds	r3, #6
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	e000      	b.n	80015ca <flash_update_memory_content+0x8e>
		if(is_tag_removed(flash_tag_buffor[i])) continue;
 80015c8:	bf00      	nop
	for(int i = 0; i < flash_tag_proxy_count; i++)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <flash_update_memory_content+0xb4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	4293      	cmp	r3, r2
 80015da:	dbd8      	blt.n	800158e <flash_update_memory_content+0x52>
	}
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000088 	.word	0x20000088
 80015e8:	2000006c 	.word	0x2000006c
 80015ec:	2000008c 	.word	0x2000008c
 80015f0:	2000006d 	.word	0x2000006d

080015f4 <flash_erase_block>:

void flash_erase_block(uint8_t *addres)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	flash_wren();
 80015fc:	f7ff fd2c 	bl	8001058 <flash_wren>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2110      	movs	r1, #16
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 f9ee 	bl	80029e8 <HAL_GPIO_WritePin>
	uint8_t data = 0x20;
 800160c:	2320      	movs	r3, #32
 800160e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001610:	f107 010f 	add.w	r1, r7, #15
 8001614:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001618:	2201      	movs	r2, #1
 800161a:	481b      	ldr	r0, [pc, #108]	; (8001688 <flash_erase_block+0x94>)
 800161c:	f003 f947 	bl	80048ae <HAL_SPI_Transmit>
	data = addres;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 8001626:	f107 010f 	add.w	r1, r7, #15
 800162a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800162e:	2201      	movs	r2, #1
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <flash_erase_block+0x94>)
 8001632:	f003 f93c 	bl	80048ae <HAL_SPI_Transmit>
	data = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 800163a:	f107 010f 	add.w	r1, r7, #15
 800163e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001642:	2201      	movs	r2, #1
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <flash_erase_block+0x94>)
 8001646:	f003 f932 	bl	80048ae <HAL_SPI_Transmit>
	data = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&spi1, &data, 1, 500);
 800164e:	f107 010f 	add.w	r1, r7, #15
 8001652:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001656:	2201      	movs	r2, #1
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <flash_erase_block+0x94>)
 800165a:	f003 f928 	bl	80048ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f001 f9bf 	bl	80029e8 <HAL_GPIO_WritePin>

	while(flash_read_status_register() & 1) HAL_Delay(1);
 800166a:	e002      	b.n	8001672 <flash_erase_block+0x7e>
 800166c:	2001      	movs	r0, #1
 800166e:	f000 fe87 	bl	8002380 <HAL_Delay>
 8001672:	f7ff fdb5 	bl	80011e0 <flash_read_status_register>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f5      	bne.n	800166c <flash_erase_block+0x78>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200008d4 	.word	0x200008d4

0800168c <is_tag_removed>:

uint8_t is_tag_removed(uint8_t *tag)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 6; i++)
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e00a      	b.n	80016b0 <is_tag_removed+0x24>
	{
		if(tag[i] != 0) return 0;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <is_tag_removed+0x1e>
 80016a6:	2300      	movs	r3, #0
 80016a8:	e006      	b.n	80016b8 <is_tag_removed+0x2c>
	for(int i = 0; i < 6; i++)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	ddf1      	ble.n	800169a <is_tag_removed+0xe>
	}
	return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <flash_clear_database_wo_password>:

void flash_clear_database_wo_password()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	flash_erase_block(MAIN_SECTION_ADDRES);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff ff93 	bl	80015f4 <flash_erase_block>
	flash_write_byte(flash_correct_password_buffor[0], TAG_PASSWORD_ADDRES);
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <flash_clear_database_wo_password+0x40>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fcdd 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[1], TAG_PASSWORD_ADDRES + 1);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <flash_clear_database_wo_password+0x40>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	2102      	movs	r1, #2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fcd7 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[2], TAG_PASSWORD_ADDRES + 2);
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <flash_clear_database_wo_password+0x40>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	2103      	movs	r1, #3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fcd1 	bl	8001094 <flash_write_byte>
	flash_write_byte(flash_correct_password_buffor[3], TAG_PASSWORD_ADDRES + 3);
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <flash_clear_database_wo_password+0x40>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	2104      	movs	r1, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fccb 	bl	8001094 <flash_write_byte>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000088 	.word	0x20000088

08001708 <keypad_init>:
#include "keypad.h"

int8_t last_pressed_index = NO_BUTTON_PRESSED;

void keypad_init(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	for(uint8_t l_row = 0; l_row < NUM_OF_ROWS; l_row++)
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e00e      	b.n	8001732 <keypad_init+0x2a>
		HAL_GPIO_WritePin(row_ports_array[l_row],
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <keypad_init+0x38>)
 8001718:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <keypad_init+0x3c>)
 8001720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001724:	2201      	movs	r2, #1
 8001726:	4619      	mov	r1, r3
 8001728:	f001 f95e 	bl	80029e8 <HAL_GPIO_WritePin>
	for(uint8_t l_row = 0; l_row < NUM_OF_ROWS; l_row++)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	3301      	adds	r3, #1
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d9ed      	bls.n	8001714 <keypad_init+0xc>
						  row_pins_array[l_row],
						  GPIO_PIN_SET);
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000004 	.word	0x20000004
 8001744:	20000020 	.word	0x20000020

08001748 <keypad_scan_pressed_index>:

int8_t keypad_scan_pressed_index(){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	for(uint8_t l_row = 0; l_row < NUM_OF_ROWS; l_row++){
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	e03d      	b.n	80017d0 <keypad_scan_pressed_index+0x88>
		HAL_GPIO_WritePin(row_ports_array[l_row],
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <keypad_scan_pressed_index+0x9c>)
 8001758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <keypad_scan_pressed_index+0xa0>)
 8001760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	f001 f93e 	bl	80029e8 <HAL_GPIO_WritePin>
						  row_pins_array[l_row],
						  GPIO_PIN_RESET);
		for(uint8_t l_col = 0; l_col < NUM_OF_COLUMNS; l_col++){
 800176c:	2300      	movs	r3, #0
 800176e:	71bb      	strb	r3, [r7, #6]
 8001770:	e01c      	b.n	80017ac <keypad_scan_pressed_index+0x64>
			if(HAL_GPIO_ReadPin(column_ports_array[l_col],
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <keypad_scan_pressed_index+0xa4>)
 8001776:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <keypad_scan_pressed_index+0xa8>)
 800177e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001782:	4619      	mov	r1, r3
 8001784:	f001 f918 	bl	80029b8 <HAL_GPIO_ReadPin>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10b      	bne.n	80017a6 <keypad_scan_pressed_index+0x5e>
								column_pins_array[l_col]) == GPIO_PIN_RESET){
				keypad_init();
 800178e:	f7ff ffbb 	bl	8001708 <keypad_init>
				return (l_row * 3 + l_col);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	461a      	mov	r2, r3
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	4413      	add	r3, r2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	4413      	add	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	e019      	b.n	80017da <keypad_scan_pressed_index+0x92>
		for(uint8_t l_col = 0; l_col < NUM_OF_COLUMNS; l_col++){
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71bb      	strb	r3, [r7, #6]
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d9df      	bls.n	8001772 <keypad_scan_pressed_index+0x2a>
			}
		}
		HAL_GPIO_WritePin(row_ports_array[l_row],
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <keypad_scan_pressed_index+0x9c>)
 80017b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <keypad_scan_pressed_index+0xa0>)
 80017be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4619      	mov	r1, r3
 80017c6:	f001 f90f 	bl	80029e8 <HAL_GPIO_WritePin>
	for(uint8_t l_row = 0; l_row < NUM_OF_ROWS; l_row++){
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	3301      	adds	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d9be      	bls.n	8001754 <keypad_scan_pressed_index+0xc>
						  row_pins_array[l_row],
						  GPIO_PIN_SET);
	}
	return NO_BUTTON_PRESSED;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000004 	.word	0x20000004
 80017e8:	20000020 	.word	0x20000020
 80017ec:	20000014 	.word	0x20000014
 80017f0:	20000028 	.word	0x20000028

080017f4 <keypad_index_to_char>:

char keypad_index_to_char(int8_t index){
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	if(index < 0 || index > 11) return KEYPAD_ERROR_CHAR;
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db03      	blt.n	800180e <keypad_index_to_char+0x1a>
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b0b      	cmp	r3, #11
 800180c:	dd01      	ble.n	8001812 <keypad_index_to_char+0x1e>
 800180e:	235e      	movs	r3, #94	; 0x5e
 8001810:	e003      	b.n	800181a <keypad_index_to_char+0x26>
	else return keypad_index_char_array[index];
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <keypad_index_to_char+0x34>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000030 	.word	0x20000030

0800182c <keypad_scan_pressed_index_filtered>:

int8_t keypad_scan_pressed_index_filtered(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	int8_t index = keypad_scan_pressed_index();
 8001832:	f7ff ff89 	bl	8001748 <keypad_scan_pressed_index>
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	if(index != last_pressed_index)
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <keypad_scan_pressed_index_filtered+0x34>)
 800183c:	f993 3000 	ldrsb.w	r3, [r3]
 8001840:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001844:	429a      	cmp	r2, r3
 8001846:	d005      	beq.n	8001854 <keypad_scan_pressed_index_filtered+0x28>
	{
		last_pressed_index = index;
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <keypad_scan_pressed_index_filtered+0x34>)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	7013      	strb	r3, [r2, #0]
		return index;
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <keypad_scan_pressed_index_filtered+0x2c>
	}
	else
	{
		return NO_BUTTON_PRESSED;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000003c 	.word	0x2000003c

08001864 <lcd_send_cmd>:
#include "lcd.h"

void lcd_send_cmd (char cmd, I2C_HandleTypeDef *i2c_handle){
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
	 char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f023 030f 	bic.w	r3, r3, #15
 8001876:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	f043 030c 	orr.w	r3, r3, #12
 8001884:	b2db      	uxtb	r3, r3
 8001886:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	b2db      	uxtb	r3, r3
 8001890:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	f043 030c 	orr.w	r3, r3, #12
 8001898:	b2db      	uxtb	r3, r3
 800189a:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handle, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a6:	f107 0208 	add.w	r2, r7, #8
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2304      	movs	r3, #4
 80018b0:	214e      	movs	r1, #78	; 0x4e
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f001 f95a 	bl	8002b6c <HAL_I2C_Master_Transmit>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <lcd_send_data>:

void lcd_send_data (char data, I2C_HandleTypeDef *i2c_handle){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f023 030f 	bic.w	r3, r3, #15
 80018d2:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f043 030d 	orr.w	r3, r3, #13
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	f043 0309 	orr.w	r3, r3, #9
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	f043 030d 	orr.w	r3, r3, #13
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	f043 0309 	orr.w	r3, r3, #9
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handle, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001902:	f107 0208 	add.w	r2, r7, #8
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2304      	movs	r3, #4
 800190c:	214e      	movs	r1, #78	; 0x4e
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f001 f92c 	bl	8002b6c <HAL_I2C_Master_Transmit>
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <lcd_init>:

void lcd_init(I2C_HandleTypeDef *i2c_handle){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	HAL_Delay(3);
	lcd_send_cmd (0x06, i2c_handle);
	HAL_Delay(3);
	lcd_send_cmd (0x0C, i2c_handle);*/

	HAL_Delay(50);
 8001924:	2032      	movs	r0, #50	; 0x32
 8001926:	f000 fd2b 	bl	8002380 <HAL_Delay>
	lcd_send_cmd(0x02, i2c_handle);
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	2002      	movs	r0, #2
 800192e:	f7ff ff99 	bl	8001864 <lcd_send_cmd>
	HAL_Delay(2);
 8001932:	2002      	movs	r0, #2
 8001934:	f000 fd24 	bl	8002380 <HAL_Delay>
	lcd_send_cmd(0x28, i2c_handle);
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	2028      	movs	r0, #40	; 0x28
 800193c:	f7ff ff92 	bl	8001864 <lcd_send_cmd>
	lcd_send_cmd(0x0C, i2c_handle);
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	200c      	movs	r0, #12
 8001944:	f7ff ff8e 	bl	8001864 <lcd_send_cmd>
	lcd_send_cmd(0x06, i2c_handle);
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	2006      	movs	r0, #6
 800194c:	f7ff ff8a 	bl	8001864 <lcd_send_cmd>
	HAL_Delay(2);
 8001950:	2002      	movs	r0, #2
 8001952:	f000 fd15 	bl	8002380 <HAL_Delay>
	lcd_send_cmd(0x01, i2c_handle);
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ff83 	bl	8001864 <lcd_send_cmd>
	lcd_send_cmd(0x80, i2c_handle);
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	2080      	movs	r0, #128	; 0x80
 8001962:	f7ff ff7f 	bl	8001864 <lcd_send_cmd>
	HAL_Delay(5);
 8001966:	2005      	movs	r0, #5
 8001968:	f000 fd0a 	bl	8002380 <HAL_Delay>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <lcd_clear>:

void lcd_clear(I2C_HandleTypeDef *i2c_handle){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(0x01, i2c_handle);
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff ff70 	bl	8001864 <lcd_send_cmd>
	HAL_Delay(2);
 8001984:	2002      	movs	r0, #2
 8001986:	f000 fcfb 	bl	8002380 <HAL_Delay>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <lcd_send_text>:

void lcd_send_text(char *text, I2C_HandleTypeDef *i2c_handle){
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	while(*text){
 800199c:	e008      	b.n	80019b0 <lcd_send_text+0x1e>
		lcd_send_data(*text, i2c_handle);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff8b 	bl	80018c0 <lcd_send_data>
		text++;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
	while(*text){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f2      	bne.n	800199e <lcd_send_text+0xc>
	}
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c4:	f000 fc67 	bl	8002296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c8:	f000 f864 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  HAL_Delay(200);
 80019cc:	20c8      	movs	r0, #200	; 0xc8
 80019ce:	f000 fcd7 	bl	8002380 <HAL_Delay>

  MX_GPIO_Init();
 80019d2:	f000 f9cf 	bl	8001d74 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d6:	f000 f8d1 	bl	8001b7c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019da:	f000 f99b 	bl	8001d14 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019de:	f000 f94b 	bl	8001c78 <MX_TIM2_Init>
  MX_SPI1_Init();
 80019e2:	f000 f90b 	bl	8001bfc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f000 fcca 	bl	8002380 <HAL_Delay>

  lcd_init(&hi2c1);
 80019ec:	4820      	ldr	r0, [pc, #128]	; (8001a70 <main+0xb0>)
 80019ee:	f7ff ff95 	bl	800191c <lcd_init>
  HAL_Delay(30);
 80019f2:	201e      	movs	r0, #30
 80019f4:	f000 fcc4 	bl	8002380 <HAL_Delay>
  lcd_clear(&hi2c1);
 80019f8:	481d      	ldr	r0, [pc, #116]	; (8001a70 <main+0xb0>)
 80019fa:	f7ff ffbb 	bl	8001974 <lcd_clear>
  keypad_init();
 80019fe:	f7ff fe83 	bl	8001708 <keypad_init>
  tim2 = htim2;
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <main+0xb4>)
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <main+0xb8>)
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	234c      	movs	r3, #76	; 0x4c
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f005 f9b5 	bl	8006d7c <memcpy>
  TIM2->CR1 = 0;
 8001a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&tim2);
 8001a1a:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0xb4>)
 8001a1c:	f003 fe04 	bl	8005628 <HAL_TIM_Base_Start_IT>

  spi1 = hspi1;
 8001a20:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <main+0xbc>)
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <main+0xc0>)
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f005 f9a6 	bl	8006d7c <memcpy>
  flash_init();
 8001a30:	f7ff fac6 	bl	8000fc0 <flash_init>
  flash_download_tag_data();
 8001a34:	f7ff fc76 	bl	8001324 <flash_download_tag_data>

  HAL_UART_Init(&huart1);
 8001a38:	4812      	ldr	r0, [pc, #72]	; (8001a84 <main+0xc4>)
 8001a3a:	f004 fa3f 	bl	8005ebc <HAL_UART_Init>
  uart1 = huart1;
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <main+0xc8>)
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <main+0xc4>)
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f005 f997 	bl	8006d7c <memcpy>
  HAL_UART_Receive_IT (&huart1, RFID_buffer, 14);
 8001a4e:	220e      	movs	r2, #14
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <main+0xcc>)
 8001a52:	480c      	ldr	r0, [pc, #48]	; (8001a84 <main+0xc4>)
 8001a54:	f004 fa80 	bl	8005f58 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_main_loop(&hi2c1);
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <main+0xb0>)
 8001a5a:	f7ff fa37 	bl	8000ecc <app_main_loop>
	HAL_Delay(100);
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	f000 fc8e 	bl	8002380 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001a64:	2104      	movs	r1, #4
 8001a66:	480a      	ldr	r0, [pc, #40]	; (8001a90 <main+0xd0>)
 8001a68:	f000 ffd6 	bl	8002a18 <HAL_GPIO_TogglePin>
	app_main_loop(&hi2c1);
 8001a6c:	e7f4      	b.n	8001a58 <main+0x98>
 8001a6e:	bf00      	nop
 8001a70:	2000068c 	.word	0x2000068c
 8001a74:	20000758 	.word	0x20000758
 8001a78:	20000888 	.word	0x20000888
 8001a7c:	200008d4 	.word	0x200008d4
 8001a80:	20000824 	.word	0x20000824
 8001a84:	200007a4 	.word	0x200007a4
 8001a88:	200006d8 	.word	0x200006d8
 8001a8c:	20000070 	.word	0x20000070
 8001a90:	48000c00 	.word	0x48000c00

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0b8      	sub	sp, #224	; 0xe0
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9e:	2244      	movs	r2, #68	; 0x44
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 f975 	bl	8006d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2288      	movs	r2, #136	; 0x88
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f005 f967 	bl	8006d92 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ae4:	2328      	movs	r3, #40	; 0x28
 8001ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aea:	2307      	movs	r3, #7
 8001aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001af6:	2304      	movs	r3, #4
 8001af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 fb97 	bl	8003234 <HAL_RCC_OscConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001b0c:	f000 fa00 	bl	8001f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b10:	230f      	movs	r3, #15
 8001b12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b32:	2104      	movs	r1, #4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 ff63 	bl	8003a00 <HAL_RCC_ClockConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b40:	f000 f9e6 	bl	8001f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001b44:	2341      	movs	r3, #65	; 0x41
 8001b46:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f958 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b5e:	f000 f9d7 	bl	8001f10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b66:	f001 fb0f 	bl	8003188 <HAL_PWREx_ControlVoltageScaling>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001b70:	f000 f9ce 	bl	8001f10 <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	37e0      	adds	r7, #224	; 0xe0
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <MX_I2C1_Init+0x78>)
 8001b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30408CFF;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <MX_I2C1_Init+0x7c>)
 8001b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb6:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001bb8:	f000 ff48 	bl	8002a4c <HAL_I2C_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bc2:	f000 f9a5 	bl	8001f10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001bca:	f001 fa37 	bl	800303c <HAL_I2CEx_ConfigAnalogFilter>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bd4:	f000 f99c 	bl	8001f10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_I2C1_Init+0x74>)
 8001bdc:	f001 fa79 	bl	80030d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001be6:	f000 f993 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000068c 	.word	0x2000068c
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	30408cff 	.word	0x30408cff

08001bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <MX_SPI1_Init+0x78>)
 8001c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c32:	2208      	movs	r2, #8
 8001c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c56:	2208      	movs	r2, #8
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_SPI1_Init+0x74>)
 8001c5c:	f002 fd84 	bl	8004768 <HAL_SPI_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c66:	f000 f953 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000824 	.word	0x20000824
 8001c74:	40013000 	.word	0x40013000

08001c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001ca0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ca4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cae:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cc2:	f003 fc59 	bl	8005578 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ccc:	f000 f920 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cde:	f003 fe32 	bl	8005946 <HAL_TIM_ConfigClockSource>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ce8:	f000 f912 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cfa:	f004 f839 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d04:	f000 f904 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000888 	.word	0x20000888

08001d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <MX_USART1_UART_Init+0x5c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART1_UART_Init+0x58>)
 8001d58:	f004 f8b0 	bl	8005ebc <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 f8d5 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200007a4 	.word	0x200007a4
 8001d70:	40013800 	.word	0x40013800

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a5c      	ldr	r2, [pc, #368]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a44      	ldr	r2, [pc, #272]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <MX_GPIO_Init+0x18c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2110      	movs	r1, #16
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f000 fded 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001e14:	483b      	ldr	r0, [pc, #236]	; (8001f04 <MX_GPIO_Init+0x190>)
 8001e16:	f000 fde7 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001e20:	4839      	ldr	r0, [pc, #228]	; (8001f08 <MX_GPIO_Init+0x194>)
 8001e22:	f000 fde1 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4838      	ldr	r0, [pc, #224]	; (8001f0c <MX_GPIO_Init+0x198>)
 8001e2c:	f000 fddc 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e30:	2310      	movs	r3, #16
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f000 fc0d 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001e4e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4828      	ldr	r0, [pc, #160]	; (8001f04 <MX_GPIO_Init+0x190>)
 8001e64:	f000 fc00 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e76:	2301      	movs	r3, #1
 8001e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4820      	ldr	r0, [pc, #128]	; (8001f04 <MX_GPIO_Init+0x190>)
 8001e82:	f000 fbf1 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	481b      	ldr	r0, [pc, #108]	; (8001f08 <MX_GPIO_Init+0x194>)
 8001e9a:	f000 fbe5 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eac:	2301      	movs	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4814      	ldr	r0, [pc, #80]	; (8001f08 <MX_GPIO_Init+0x194>)
 8001eb8:	f000 fbd6 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <MX_GPIO_Init+0x194>)
 8001ed6:	f000 fbc7 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eda:	2304      	movs	r3, #4
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4806      	ldr	r0, [pc, #24]	; (8001f0c <MX_GPIO_Init+0x198>)
 8001ef2:	f000 fbb9 	bl	8002668 <HAL_GPIO_Init>

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_MspInit+0x44>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_MspInit+0x44>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6613      	str	r3, [r2, #96]	; 0x60
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x44>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x44>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x44>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x44>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_I2C_MspInit+0x7c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d127      	bne.n	8001fda <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa6:	2312      	movs	r3, #18
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <HAL_I2C_MspInit+0x84>)
 8001fbe:	f000 fb53 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_I2C_MspInit+0x80>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400

08001ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_SPI_MspInit+0x7c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d128      	bne.n	8002064 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_SPI_MspInit+0x80>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_SPI_MspInit+0x80>)
 8002018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201c:	6613      	str	r3, [r2, #96]	; 0x60
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_SPI_MspInit+0x80>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_SPI_MspInit+0x80>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_SPI_MspInit+0x80>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_SPI_MspInit+0x80>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002042:	23e0      	movs	r3, #224	; 0xe0
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002052:	2305      	movs	r3, #5
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f000 fb02 	bl	8002668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013000 	.word	0x40013000
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d113      	bne.n	80020ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_TIM_Base_MspInit+0x44>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <HAL_TIM_Base_MspInit+0x44>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_TIM_Base_MspInit+0x44>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	201c      	movs	r0, #28
 80020a4:	f000 fa69 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a8:	201c      	movs	r0, #28
 80020aa:	f000 fa82 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_UART_MspInit+0x90>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d131      	bne.n	8002142 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_UART_MspInit+0x94>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_UART_MspInit+0x94>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_UART_MspInit+0x94>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_UART_MspInit+0x94>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_UART_MspInit+0x94>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_UART_MspInit+0x94>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800210e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002120:	2307      	movs	r3, #7
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f000 fa9b 	bl	8002668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2025      	movs	r0, #37	; 0x25
 8002138:	f000 fa1f 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800213c:	2025      	movs	r0, #37	; 0x25
 800213e:	f000 fa38 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f8ca 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <TIM2_IRQHandler+0x10>)
 80021b6:	f003 faa7 	bl	8005708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000888 	.word	0x20000888

080021c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <USART1_IRQHandler+0x10>)
 80021ca:	f003 ff67 	bl	800609c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200007a4 	.word	0x200007a4

080021d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <SystemInit+0x64>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <SystemInit+0x64>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <SystemInit+0x68>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <SystemInit+0x68>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <SystemInit+0x68>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <SystemInit+0x68>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <SystemInit+0x68>)
 8002204:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002208:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800220c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <SystemInit+0x68>)
 8002210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002214:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <SystemInit+0x68>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <SystemInit+0x68>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <SystemInit+0x68>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <SystemInit+0x64>)
 800222a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222e:	609a      	str	r2, [r3, #8]
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	40021000 	.word	0x40021000

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff ffc6 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800224c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800224e:	e003      	b.n	8002258 <LoopCopyDataInit>

08002250 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002252:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002254:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002256:	3104      	adds	r1, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <LoopForever+0xa>)
	ldr	r3, =_edata
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <LoopForever+0xe>)
	adds	r2, r0, r1
 800225c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800225e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002260:	d3f6      	bcc.n	8002250 <CopyDataInit>
	ldr	r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002264:	e002      	b.n	800226c <LoopFillZerobss>

08002266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002266:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002268:	f842 3b04 	str.w	r3, [r2], #4

0800226c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <LoopForever+0x16>)
	cmp	r2, r3
 800226e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002270:	d3f9      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f004 fd5f 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7ff fba3 	bl	80019c0 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002280:	08006fd4 	.word	0x08006fd4
	ldr	r0, =_sdata
 8002284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002288:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 800228c:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8002290:	2000093c 	.word	0x2000093c

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>

08002296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f95f 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 f80e 	bl	80022c8 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	e001      	b.n	80022bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b8:	f7ff fe32 	bl	8001f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_InitTick+0x6c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_InitTick+0x70>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_InitTick+0x6c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f96b 	bl	80025ce <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d809      	bhi.n	8002318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f935 	bl	800257a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_InitTick+0x74>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e007      	b.n	8002328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e004      	b.n	8002328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e001      	b.n	8002328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000048 	.word	0x20000048
 8002338:	20000040 	.word	0x20000040
 800233c:	20000044 	.word	0x20000044

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000048 	.word	0x20000048
 8002364:	20000938 	.word	0x20000938

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000938 	.word	0x20000938

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_Delay+0x40>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000048 	.word	0x20000048

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d005      	beq.n	800260a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e029      	b.n	800265e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 020e 	bic.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 021c 	and.w	r2, r3, #28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
    }
  }
  return status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	e17f      	b.n	8002978 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8171 	beq.w	8002972 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00b      	beq.n	80026b0 <HAL_GPIO_Init+0x48>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a4:	2b11      	cmp	r3, #17
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d130      	bne.n	8002712 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e6:	2201      	movs	r2, #1
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0201 	and.w	r2, r3, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b03      	cmp	r3, #3
 800271c:	d118      	bne.n	8002750 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x128>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b12      	cmp	r3, #18
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80ac 	beq.w	8002972 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_GPIO_Init+0x32c>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_GPIO_Init+0x32c>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6613      	str	r3, [r2, #96]	; 0x60
 8002826:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_GPIO_Init+0x32c>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002832:	4a59      	ldr	r2, [pc, #356]	; (8002998 <HAL_GPIO_Init+0x330>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x242>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4e      	ldr	r2, [pc, #312]	; (800299c <HAL_GPIO_Init+0x334>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x23e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_GPIO_Init+0x338>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x23a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_GPIO_Init+0x33c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x236>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_GPIO_Init+0x340>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x232>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_GPIO_Init+0x344>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x22e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_GPIO_Init+0x348>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x22a>
 800288e:	2306      	movs	r3, #6
 8002890:	e00c      	b.n	80028ac <HAL_GPIO_Init+0x244>
 8002892:	2307      	movs	r3, #7
 8002894:	e00a      	b.n	80028ac <HAL_GPIO_Init+0x244>
 8002896:	2305      	movs	r3, #5
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x244>
 800289a:	2304      	movs	r3, #4
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x244>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028aa:	2300      	movs	r3, #0
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028bc:	4936      	ldr	r1, [pc, #216]	; (8002998 <HAL_GPIO_Init+0x330>)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028ee:	4a31      	ldr	r2, [pc, #196]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002918:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800296c:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae78 	bne.w	8002678 <HAL_GPIO_Init+0x10>
  }
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40021000 	.word	0x40021000
 8002998:	40010000 	.word	0x40010000
 800299c:	48000400 	.word	0x48000400
 80029a0:	48000800 	.word	0x48000800
 80029a4:	48000c00 	.word	0x48000c00
 80029a8:	48001000 	.word	0x48001000
 80029ac:	48001400 	.word	0x48001400
 80029b0:	48001800 	.word	0x48001800
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e001      	b.n	80029da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43d9      	mvns	r1, r3
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	400b      	ands	r3, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e081      	b.n	8002b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fa78 	bl	8001f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	e006      	b.n	8002ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d104      	bne.n	8002ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	ea42 0103 	orr.w	r1, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	021a      	lsls	r2, r3, #8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69d9      	ldr	r1, [r3, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	460b      	mov	r3, r1
 8002b7a:	817b      	strh	r3, [r7, #10]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	f040 80da 	bne.w	8002d42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x30>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0d3      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba4:	f7ff fbe0 	bl	8002368 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2319      	movs	r3, #25
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8f0 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0be      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	893a      	ldrh	r2, [r7, #8]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2bff      	cmp	r3, #255	; 0xff
 8002bf6:	d90e      	bls.n	8002c16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f9e6 	bl	8002fe0 <I2C_TransferConfig>
 8002c14:	e06c      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f9d5 	bl	8002fe0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c36:	e05b      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6a39      	ldr	r1, [r7, #32]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f8ed 	bl	8002e1c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e07b      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d034      	beq.n	8002cf0 <HAL_I2C_Master_Transmit+0x184>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d130      	bne.n	8002cf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f87f 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e04d      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d90e      	bls.n	8002cd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f989 	bl	8002fe0 <I2C_TransferConfig>
 8002cce:	e00f      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f978 	bl	8002fe0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d19e      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8cc 	bl	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01a      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d22:	400b      	ands	r3, r1
 8002d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	80002000 	.word	0x80002000
 8002d50:	fe00e800 	.word	0xfe00e800

08002d54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d103      	bne.n	8002d72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d007      	beq.n	8002d90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	619a      	str	r2, [r3, #24]
  }
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e022      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d01e      	beq.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7ff fad7 	bl	8002368 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d113      	bne.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00f      	b.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d0cd      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e28:	e02c      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f870 	bl	8002f14 <I2C_IsAcknowledgeFailed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e02a      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d01e      	beq.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff fa8f 	bl	8002368 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d113      	bne.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d1cb      	bne.n	8002e2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea8:	e028      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f830 	bl	8002f14 <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e026      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7ff fa53 	bl	8002368 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d1cf      	bne.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d151      	bne.n	8002fd2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2e:	e022      	b.n	8002f76 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d01e      	beq.n	8002f76 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7ff fa16 	bl	8002368 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_IsAcknowledgeFailed+0x3a>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e02e      	b.n	8002fd4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d1d5      	bne.n	8002f30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2220      	movs	r2, #32
 8002f92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fedd 	bl	8002d54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <I2C_IsAcknowledgeFailed+0xc8>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	fe00e800 	.word	0xfe00e800

08002fe0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	0d5b      	lsrs	r3, r3, #21
 8002ffc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <I2C_TransferConfig+0x58>)
 8003002:	430b      	orrs	r3, r1
 8003004:	43db      	mvns	r3, r3
 8003006:	ea02 0103 	and.w	r1, r2, r3
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003010:	7a7b      	ldrb	r3, [r7, #9]
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	03ff63ff 	.word	0x03ff63ff

0800303c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	d138      	bne.n	80030c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800305c:	2302      	movs	r3, #2
 800305e:	e032      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d139      	bne.n	800315c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e033      	b.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	; 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003124:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_PWREx_GetVoltageRange+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40007000 	.word	0x40007000

08003188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003196:	d130      	bne.n	80031fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d038      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2232      	movs	r2, #50	; 0x32
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9b      	lsrs	r3, r3, #18
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031cc:	e002      	b.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e0:	d102      	bne.n	80031e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f2      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f4:	d110      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e00f      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d007      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003210:	4a05      	ldr	r2, [pc, #20]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003216:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40007000 	.word	0x40007000
 800322c:	20000040 	.word	0x20000040
 8003230:	431bde83 	.word	0x431bde83

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e3d4      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	4ba1      	ldr	r3, [pc, #644]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003250:	4b9e      	ldr	r3, [pc, #632]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80e4 	beq.w	8003430 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_RCC_OscConfig+0x4a>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	f040 808b 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 8087 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327e:	4b93      	ldr	r3, [pc, #588]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3ac      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	4b8c      	ldr	r3, [pc, #560]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_RCC_OscConfig+0x7c>
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ae:	e005      	b.n	80032bc <HAL_RCC_OscConfig+0x88>
 80032b0:	4b86      	ldr	r3, [pc, #536]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d223      	bcs.n	8003308 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fd3f 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e38d      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d4:	4b7d      	ldr	r3, [pc, #500]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7c      	ldr	r2, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032da:	f043 0308 	orr.w	r3, r3, #8
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4977      	ldr	r1, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4972      	ldr	r1, [pc, #456]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
 8003306:	e025      	b.n	8003354 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003308:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	496a      	ldr	r1, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003326:	4b69      	ldr	r3, [pc, #420]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	4965      	ldr	r1, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fcff 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e34d      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003354:	f000 fc36 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003358:	4601      	mov	r1, r0
 800335a:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	4a5a      	ldr	r2, [pc, #360]	; (80034d0 <HAL_RCC_OscConfig+0x29c>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa21 f303 	lsr.w	r3, r1, r3
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_OscConfig+0x2a0>)
 8003372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <HAL_RCC_OscConfig+0x2a4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe ffa5 	bl	80022c8 <HAL_InitTick>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d052      	beq.n	800342e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	e331      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d032      	beq.n	80033fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003394:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a0:	f7fe ffe2 	bl	8002368 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a8:	f7fe ffde 	bl	8002368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e31a      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ba:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c6:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a40      	ldr	r2, [pc, #256]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033cc:	f043 0308 	orr.w	r3, r3, #8
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	493b      	ldr	r1, [pc, #236]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e4:	4b39      	ldr	r3, [pc, #228]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	4936      	ldr	r1, [pc, #216]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e01a      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033fa:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a33      	ldr	r2, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003406:	f7fe ffaf 	bl	8002368 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340e:	f7fe ffab 	bl	8002368 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e2e7      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x1da>
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d074      	beq.n	8003526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x21a>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d10e      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d064      	beq.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d160      	bne.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e2c4      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x24a>
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a15      	ldr	r2, [pc, #84]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e01d      	b.n	80034ba <HAL_RCC_OscConfig+0x286>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x26e>
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800348e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_OscConfig+0x286>
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a06      	ldr	r2, [pc, #24]	; (80034cc <HAL_RCC_OscConfig+0x298>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01c      	beq.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe ff51 	bl	8002368 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x2ba>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08006f7c 	.word	0x08006f7c
 80034d4:	20000040 	.word	0x20000040
 80034d8:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe ff44 	bl	8002368 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e280      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	4baf      	ldr	r3, [pc, #700]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x2a8>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe ff34 	bl	8002368 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe ff30 	bl	8002368 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e26c      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003516:	4ba5      	ldr	r3, [pc, #660]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d0>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d060      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x310>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d119      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d116      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003544:	4b99      	ldr	r3, [pc, #612]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_OscConfig+0x328>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e249      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b93      	ldr	r3, [pc, #588]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	4990      	ldr	r1, [pc, #576]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	e040      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d023      	beq.n	80035c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357a:	4b8c      	ldr	r3, [pc, #560]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a8b      	ldr	r2, [pc, #556]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe feef 	bl	8002368 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7fe feeb 	bl	8002368 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e227      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a0:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	497c      	ldr	r1, [pc, #496]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e018      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a79      	ldr	r2, [pc, #484]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fecb 	bl	8002368 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fec7 	bl	8002368 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e203      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e8:	4b70      	ldr	r3, [pc, #448]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03c      	beq.n	800367a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003608:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360e:	4a67      	ldr	r2, [pc, #412]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fea6 	bl	8002368 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe fea2 	bl	8002368 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1de      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003632:	4b5e      	ldr	r3, [pc, #376]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCC_OscConfig+0x3ec>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fe89 	bl	8002368 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe fe85 	bl	8002368 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1c1      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800368c:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b44      	ldr	r3, [pc, #272]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	4a43      	ldr	r2, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	; 0x58
 80036a4:	4b41      	ldr	r3, [pc, #260]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCC_OscConfig+0x57c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d118      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x57c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <HAL_RCC_OscConfig+0x57c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fe4c 	bl	8002368 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe fe48 	bl	8002368 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e184      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x57c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x4d8>
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370a:	e024      	b.n	8003756 <HAL_RCC_OscConfig+0x522>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d110      	bne.n	8003736 <HAL_RCC_OscConfig+0x502>
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	4a24      	ldr	r2, [pc, #144]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003734:	e00f      	b.n	8003756 <HAL_RCC_OscConfig+0x522>
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fe03 	bl	8002368 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fdff 	bl	8002368 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e139      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_OscConfig+0x578>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ed      	beq.n	8003766 <HAL_RCC_OscConfig+0x532>
 800378a:	e01a      	b.n	80037c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fe fdec 	bl	8002368 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003792:	e00f      	b.n	80037b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fe fde8 	bl	8002368 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d906      	bls.n	80037b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e122      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b90      	ldr	r3, [pc, #576]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e8      	bne.n	8003794 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a8a      	ldr	r2, [pc, #552]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8108 	beq.w	80039ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 80d0 	bne.w	8003988 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b83      	ldr	r3, [pc, #524]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d130      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	3b01      	subs	r3, #1
 8003808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d127      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11f      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003828:	2a07      	cmp	r2, #7
 800382a:	bf14      	ite	ne
 800382c:	2201      	movne	r2, #1
 800382e:	2200      	moveq	r2, #0
 8003830:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003832:	4293      	cmp	r3, r2
 8003834:	d113      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d109      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	3b01      	subs	r3, #1
 8003858:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d06e      	beq.n	800393c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d069      	beq.n	8003938 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b7      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003880:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5c      	ldr	r2, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800388c:	f7fe fd6c 	bl	8002368 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fd68 	bl	8002368 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0a4      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_RCC_OscConfig+0x7c8>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038cc:	0212      	lsls	r2, r2, #8
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0552      	lsls	r2, r2, #21
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0652      	lsls	r2, r2, #25
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ec:	0912      	lsrs	r2, r2, #4
 80038ee:	0452      	lsls	r2, r2, #17
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4941      	ldr	r1, [pc, #260]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f8:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3e      	ldr	r2, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003910:	f7fe fd2a 	bl	8002368 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fd26 	bl	8002368 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e062      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003936:	e05a      	b.n	80039ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e059      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d152      	bne.n	80039ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003960:	f7fe fd02 	bl	8002368 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fcfe 	bl	8002368 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e03a      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x734>
 8003986:	e032      	b.n	80039ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d02d      	beq.n	80039ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 8003994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003998:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80039ac:	f023 0303 	bic.w	r3, r3, #3
 80039b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80039b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fcd1 	bl	8002368 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe fccd 	bl	8002368 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e009      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x7c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x796>
 80039e8:	e001      	b.n	80039ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	f99d808c 	.word	0xf99d808c

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0c8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04c      	beq.n	8003aea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e092      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e086      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e07e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	493f      	ldr	r1, [pc, #252]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fe fc55 	bl	8002368 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fe fc51 	bl	8002368 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e066      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 020c 	and.w	r2, r3, #12
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d1eb      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	492c      	ldr	r1, [pc, #176]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4924      	ldr	r1, [pc, #144]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e036      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4918      	ldr	r1, [pc, #96]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4910      	ldr	r1, [pc, #64]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b76:	f000 f825 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	5cd3      	ldrb	r3, [r2, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fb94 	bl	80022c8 <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	08006f7c 	.word	0x08006f7c
 8003bbc:	20000040 	.word	0x20000040
 8003bc0:	20000044 	.word	0x20000044

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d11e      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e005      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e004      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d133      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0xa4>
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0xaa>
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c6a:	617b      	str	r3, [r7, #20]
      break;
 8003c6c:	e005      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c70:	617b      	str	r3, [r7, #20]
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	617b      	str	r3, [r7, #20]
      break;
 8003c78:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	3301      	adds	r3, #1
 8003c86:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	fb02 f203 	mul.w	r2, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0e5b      	lsrs	r3, r3, #25
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cba:	69bb      	ldr	r3, [r7, #24]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3724      	adds	r7, #36	; 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08006f94 	.word	0x08006f94
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000040 	.word	0x20000040

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08006f8c 	.word	0x08006f8c

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d20:	f7ff ffda 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d24:	4601      	mov	r1, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08006f8c 	.word	0x08006f8c

08003d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d60:	f7ff fa04 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003d64:	6178      	str	r0, [r7, #20]
 8003d66:	e014      	b.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d80:	f7ff f9f4 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d10b      	bne.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d919      	bls.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2ba0      	cmp	r3, #160	; 0xa0
 8003da4:	d902      	bls.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da6:	2302      	movs	r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e013      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dac:	2301      	movs	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e010      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d902      	bls.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003db8:	2303      	movs	r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e00a      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d102      	bne.n	8003dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e004      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d101      	bne.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 0207 	bic.w	r2, r3, #7
 8003ddc:	4909      	ldr	r1, [pc, #36]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40022000 	.word	0x40022000

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e14:	2300      	movs	r3, #0
 8003e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d03f      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2c:	d01c      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e32:	d802      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e38:	e01f      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e44:	d01c      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e46:	e018      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e48:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a84      	ldr	r2, [pc, #528]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e54:	e015      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fab9 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e66:	e00c      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fba0 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e88:	4b75      	ldr	r3, [pc, #468]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	4972      	ldr	r1, [pc, #456]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb8:	d01c      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebe:	d802      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003ec4:	e01f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed0:	d01c      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003ed2:	e018      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a61      	ldr	r2, [pc, #388]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee0:	e015      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fa73 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef2:	e00c      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3320      	adds	r3, #32
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fb5a 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0a:	e000      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f14:	4b52      	ldr	r3, [pc, #328]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f22:	494f      	ldr	r1, [pc, #316]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a0 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	4a40      	ldr	r2, [pc, #256]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58
 8003f64:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f80:	f7fe f9f2 	bl	8002368 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f86:	e009      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fe f9ee 	bl	8002368 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d902      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	74fb      	strb	r3, [r7, #19]
        break;
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ef      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d15c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fae:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01f      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d019      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd8:	4b21      	ldr	r3, [pc, #132]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a20      	ldr	r2, [pc, #128]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fe f9ad 	bl	8002368 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	e00b      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe f9a9 	bl	8002368 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d902      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	74fb      	strb	r3, [r7, #19]
            break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ec      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404e:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	74bb      	strb	r3, [r7, #18]
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406c:	7c7b      	ldrb	r3, [r7, #17]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b9e      	ldr	r3, [pc, #632]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4a9d      	ldr	r2, [pc, #628]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800408a:	4b98      	ldr	r3, [pc, #608]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f023 0203 	bic.w	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	4994      	ldr	r1, [pc, #592]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ac:	4b8f      	ldr	r3, [pc, #572]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 020c 	bic.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	498c      	ldr	r1, [pc, #560]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ce:	4b87      	ldr	r3, [pc, #540]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4983      	ldr	r1, [pc, #524]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f0:	4b7e      	ldr	r3, [pc, #504]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	497b      	ldr	r1, [pc, #492]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004112:	4b76      	ldr	r3, [pc, #472]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	4972      	ldr	r1, [pc, #456]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004134:	4b6d      	ldr	r3, [pc, #436]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	496a      	ldr	r1, [pc, #424]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	4961      	ldr	r1, [pc, #388]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004178:	4b5c      	ldr	r3, [pc, #368]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	4959      	ldr	r1, [pc, #356]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419a:	4b54      	ldr	r3, [pc, #336]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	4950      	ldr	r1, [pc, #320]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041bc:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	4948      	ldr	r1, [pc, #288]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041de:	4b43      	ldr	r3, [pc, #268]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	493f      	ldr	r1, [pc, #252]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d028      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004200:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420e:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421e:	d106      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004220:	4b32      	ldr	r3, [pc, #200]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422a:	60d3      	str	r3, [r2, #12]
 800422c:	e011      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004236:	d10c      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f8c8 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d028      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800425e:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	491f      	ldr	r1, [pc, #124]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427c:	d106      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427e:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004288:	60d3      	str	r3, [r2, #12]
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2101      	movs	r1, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f899 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	4908      	ldr	r1, [pc, #32]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042da:	d109      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a02      	ldr	r2, [pc, #8]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
 80042e8:	e014      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f867 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	4928      	ldr	r1, [pc, #160]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433e:	d10d      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2102      	movs	r1, #2
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f844 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d014      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
 800435a:	e011      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3320      	adds	r3, #32
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f921 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439a:	490d      	ldr	r1, [pc, #52]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	4904      	ldr	r1, [pc, #16]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000

080043d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e2:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d018      	beq.n	8004420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ee:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0203 	and.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10d      	bne.n	800441a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
       ||
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
       ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d044      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	e041      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d00c      	beq.n	8004442 <RCCEx_PLLSAI1_Config+0x6e>
 8004428:	2b03      	cmp	r3, #3
 800442a:	d013      	beq.n	8004454 <RCCEx_PLLSAI1_Config+0x80>
 800442c:	2b01      	cmp	r3, #1
 800442e:	d120      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004430:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11d      	bne.n	8004478 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e01a      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004442:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e013      	b.n	800447c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004454:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004470:	e006      	b.n	8004480 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      break;
 8004476:	e004      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004480:	bf00      	nop
    }

    if(status == HAL_OK)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004488:	4b49      	ldr	r3, [pc, #292]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	3b01      	subs	r3, #1
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	430b      	orrs	r3, r1
 800449e:	4944      	ldr	r1, [pc, #272]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d17d      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fd ff57 	bl	8002368 <HAL_GetTick>
 80044ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044bc:	e009      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044be:	f7fd ff53 	bl	8002368 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d902      	bls.n	80044d2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	73fb      	strb	r3, [r7, #15]
        break;
 80044d0:	e005      	b.n	80044de <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ef      	bne.n	80044be <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d160      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d111      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ea:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	0211      	lsls	r1, r2, #8
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68d2      	ldr	r2, [r2, #12]
 8004500:	0912      	lsrs	r2, r2, #4
 8004502:	0452      	lsls	r2, r2, #17
 8004504:	430a      	orrs	r2, r1
 8004506:	492a      	ldr	r1, [pc, #168]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
 800450c:	e027      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d112      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800451c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6912      	ldr	r2, [r2, #16]
 800452a:	0852      	lsrs	r2, r2, #1
 800452c:	3a01      	subs	r2, #1
 800452e:	0552      	lsls	r2, r2, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
 8004538:	e011      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004542:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6952      	ldr	r2, [r2, #20]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0652      	lsls	r2, r2, #25
 8004556:	430a      	orrs	r2, r1
 8004558:	4915      	ldr	r1, [pc, #84]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd fefd 	bl	8002368 <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004570:	e009      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004572:	f7fd fef9 	bl	8002368 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	73fb      	strb	r3, [r7, #15]
          break;
 8004584:	e005      	b.n	8004592 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4903      	ldr	r1, [pc, #12]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c2:	4b68      	ldr	r3, [pc, #416]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d018      	beq.n	8004600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ce:	4b65      	ldr	r3, [pc, #404]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10d      	bne.n	80045fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
       ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045e6:	4b5f      	ldr	r3, [pc, #380]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
       ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d044      	beq.n	8004684 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e041      	b.n	8004684 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d00c      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0x6e>
 8004608:	2b03      	cmp	r3, #3
 800460a:	d013      	beq.n	8004634 <RCCEx_PLLSAI2_Config+0x80>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d120      	bne.n	8004652 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004610:	4b54      	ldr	r3, [pc, #336]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004620:	e01a      	b.n	8004658 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004622:	4b50      	ldr	r3, [pc, #320]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004632:	e013      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004634:	4b4b      	ldr	r3, [pc, #300]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004650:	e006      	b.n	8004660 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      break;
 8004656:	e004      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004658:	bf00      	nop
 800465a:	e002      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004660:	bf00      	nop
    }

    if(status == HAL_OK)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004668:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	430b      	orrs	r3, r1
 800467e:	4939      	ldr	r1, [pc, #228]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d167      	bne.n	800475a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a35      	ldr	r2, [pc, #212]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fd fe67 	bl	8002368 <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800469c:	e009      	b.n	80046b2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800469e:	f7fd fe63 	bl	8002368 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	73fb      	strb	r3, [r7, #15]
        break;
 80046b0:	e005      	b.n	80046be <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ef      	bne.n	800469e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d14a      	bne.n	800475a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d111      	bne.n	80046ee <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	0211      	lsls	r1, r2, #8
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68d2      	ldr	r2, [r2, #12]
 80046e0:	0912      	lsrs	r2, r2, #4
 80046e2:	0452      	lsls	r2, r2, #17
 80046e4:	430a      	orrs	r2, r1
 80046e6:	491f      	ldr	r1, [pc, #124]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	614b      	str	r3, [r1, #20]
 80046ec:	e011      	b.n	8004712 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6892      	ldr	r2, [r2, #8]
 80046fe:	0211      	lsls	r1, r2, #8
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6912      	ldr	r2, [r2, #16]
 8004704:	0852      	lsrs	r2, r2, #1
 8004706:	3a01      	subs	r2, #1
 8004708:	0652      	lsls	r2, r2, #25
 800470a:	430a      	orrs	r2, r1
 800470c:	4915      	ldr	r1, [pc, #84]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7fd fe23 	bl	8002368 <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004724:	e009      	b.n	800473a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004726:	f7fd fe1f 	bl	8002368 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d902      	bls.n	800473a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	73fb      	strb	r3, [r7, #15]
          break;
 8004738:	e005      	b.n	8004746 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ef      	beq.n	8004726 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e095      	b.n	80048a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478a:	d009      	beq.n	80047a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
 8004792:	e005      	b.n	80047a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd fc18 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e0:	d902      	bls.n	80047e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e002      	b.n	80047ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_Init+0xa0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	ea42 0103 	orr.w	r1, r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 0204 	and.w	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004884:	ea42 0103 	orr.w	r1, r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b088      	sub	sp, #32
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_SPI_Transmit+0x22>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e158      	b.n	8004b82 <HAL_SPI_Transmit+0x2d4>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048d8:	f7fd fd46 	bl	8002368 <HAL_GetTick>
 80048dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f2:	e13d      	b.n	8004b70 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_SPI_Transmit+0x52>
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004904:	e134      	b.n	8004b70 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2203      	movs	r2, #3
 800490a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d10f      	bne.n	8004972 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004998:	d94b      	bls.n	8004a32 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0xfa>
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d13e      	bne.n	8004a26 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049cc:	e02b      	b.n	8004a26 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d112      	bne.n	8004a02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fd fcb1 	bl	8002368 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x16c>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x172>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a24:	e0a4      	b.n	8004b70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ce      	bne.n	80049ce <HAL_SPI_Transmit+0x120>
 8004a30:	e07c      	b.n	8004b2c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Transmit+0x192>
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d170      	bne.n	8004b22 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d912      	bls.n	8004a70 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b02      	subs	r3, #2
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a6e:	e058      	b.n	8004b22 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a96:	e044      	b.n	8004b22 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d12b      	bne.n	8004afe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d912      	bls.n	8004ad6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b02      	subs	r3, #2
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ad4:	e025      	b.n	8004b22 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004afc:	e011      	b.n	8004b22 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afe:	f7fd fc33 	bl	8002368 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d803      	bhi.n	8004b16 <HAL_SPI_Transmit+0x268>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Transmit+0x26e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b20:	e026      	b.n	8004b70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1b5      	bne.n	8004a98 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fcdb 	bl	80054ec <SPI_EndRxTxTransaction>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e000      	b.n	8004b70 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba6:	d112      	bne.n	8004bce <HAL_SPI_Receive+0x44>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f910 	bl	8004dea <HAL_SPI_TransmitReceive>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	e109      	b.n	8004de2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_Receive+0x52>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e102      	b.n	8004de2 <HAL_SPI_Receive+0x258>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be4:	f7fd fbc0 	bl	8002368 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bfa:	e0e9      	b.n	8004dd0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Receive+0x7e>
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c0c:	e0e0      	b.n	8004dd0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2204      	movs	r2, #4
 8004c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c58:	d908      	bls.n	8004c6c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e007      	b.n	8004c7c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	d10f      	bne.n	8004ca6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d007      	beq.n	8004cc4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ccc:	d867      	bhi.n	8004d9e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cce:	e030      	b.n	8004d32 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d117      	bne.n	8004d0e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f103 020c 	add.w	r2, r3, #12
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d0c:	e011      	b.n	8004d32 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0e:	f7fd fb2b 	bl	8002368 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d803      	bhi.n	8004d26 <HAL_SPI_Receive+0x19c>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d102      	bne.n	8004d2c <HAL_SPI_Receive+0x1a2>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d30:	e04e      	b.n	8004dd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c8      	bne.n	8004cd0 <HAL_SPI_Receive+0x146>
 8004d3e:	e034      	b.n	8004daa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d115      	bne.n	8004d7a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d78:	e011      	b.n	8004d9e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7a:	f7fd faf5 	bl	8002368 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d803      	bhi.n	8004d92 <HAL_SPI_Receive+0x208>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d102      	bne.n	8004d98 <HAL_SPI_Receive+0x20e>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d9c:	e018      	b.n	8004dd0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ca      	bne.n	8004d40 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fb44 	bl	800543c <SPI_EndRxTransaction>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
 8004dcc:	e000      	b.n	8004dd0 <HAL_SPI_Receive+0x246>
  }

error :
 8004dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b08a      	sub	sp, #40	; 0x28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x26>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e1fb      	b.n	8005208 <HAL_SPI_TransmitReceive+0x41e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e18:	f7fd faa6 	bl	8002368 <HAL_GetTick>
 8004e1c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e24:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e34:	7efb      	ldrb	r3, [r7, #27]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d00e      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x6e>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x66>
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d003      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e56:	e1cd      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x80>
 8004e64:	887b      	ldrh	r3, [r7, #2]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e70:	e1c0      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d003      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2205      	movs	r2, #5
 8004e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	887a      	ldrh	r2, [r7, #2]
 8004e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	887a      	ldrh	r2, [r7, #2]
 8004e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec8:	d802      	bhi.n	8004ed0 <HAL_SPI_TransmitReceive+0xe6>
 8004eca:	8a3b      	ldrh	r3, [r7, #16]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d908      	bls.n	8004ee2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e007      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d007      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f18:	d97c      	bls.n	8005014 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x13e>
 8004f22:	8a7b      	ldrh	r3, [r7, #18]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d169      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	1c9a      	adds	r2, r3, #2
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4c:	e056      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d11b      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x1aa>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x1aa>
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d113      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11c      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x1f2>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fdc:	f7fd f9c4 	bl	8002368 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d807      	bhi.n	8004ffc <HAL_SPI_TransmitReceive+0x212>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d003      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ffa:	e0fb      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1a3      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x164>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d19d      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x164>
 8005012:	e0df      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x23a>
 800501c:	8a7b      	ldrh	r3, [r7, #18]
 800501e:	2b01      	cmp	r3, #1
 8005020:	f040 80cb 	bne.w	80051ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b01      	cmp	r3, #1
 800502c:	d912      	bls.n	8005054 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	1c9a      	adds	r2, r3, #2
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b02      	subs	r3, #2
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005052:	e0b2      	b.n	80051ba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	7812      	ldrb	r2, [r2, #0]
 8005060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800507a:	e09e      	b.n	80051ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b02      	cmp	r3, #2
 8005088:	d134      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x30a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02f      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x30a>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2b01      	cmp	r3, #1
 8005098:	d12c      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d912      	bls.n	80050ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b02      	subs	r3, #2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050c8:	e012      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d148      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x3aa>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d042      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d923      	bls.n	8005162 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	b292      	uxth	r2, r2
 8005126:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b02      	subs	r3, #2
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d81f      	bhi.n	8005190 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	e016      	b.n	8005190 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f103 020c 	add.w	r2, r3, #12
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005190:	2301      	movs	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005194:	f7fd f8e8 	bl	8002368 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d803      	bhi.n	80051ac <HAL_SPI_TransmitReceive+0x3c2>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x3c8>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051b8:	e01c      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f47f af5b 	bne.w	800507c <HAL_SPI_TransmitReceive+0x292>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f47f af54 	bne.w	800507c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f987 	bl	80054ec <SPI_EndRxTxTransaction>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d006      	beq.n	80051f2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
 80051f0:	e000      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80051f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005208:	4618      	mov	r0, r3
 800520a:	3728      	adds	r7, #40	; 0x28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005220:	f7fd f8a2 	bl	8002368 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005230:	f7fd f89a 	bl	8002368 <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	015b      	lsls	r3, r3, #5
 800523c:	0d1b      	lsrs	r3, r3, #20
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005246:	e054      	b.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d050      	beq.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005250:	f7fd f88a 	bl	8002368 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d902      	bls.n	8005266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d13d      	bne.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d111      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005288:	d004      	beq.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d107      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ac:	d10f      	bne.n	80052ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e017      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d19b      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000040 	.word	0x20000040

08005320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800532e:	f7fd f81b 	bl	8002368 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4413      	add	r3, r2
 800533c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800533e:	f7fd f813 	bl	8002368 <HAL_GetTick>
 8005342:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005344:	4b3c      	ldr	r3, [pc, #240]	; (8005438 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00da      	lsls	r2, r3, #3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	0d1b      	lsrs	r3, r3, #20
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800535c:	e05f      	b.n	800541e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005364:	d106      	bne.n	8005374 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d050      	beq.n	800541e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800537c:	f7fc fff4 	bl	8002368 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d902      	bls.n	8005392 <SPI_WaitFifoStateUntilTimeout+0x72>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d13d      	bne.n	800540e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d111      	bne.n	80053d0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d004      	beq.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d107      	bne.n	80053d0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d10f      	bne.n	80053fa <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e010      	b.n	8005430 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3b01      	subs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d197      	bne.n	800535e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000040 	.word	0x20000040

0800543c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005450:	d111      	bne.n	8005476 <SPI_EndRxTransaction+0x3a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545a:	d004      	beq.n	8005466 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d107      	bne.n	8005476 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fec5 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e023      	b.n	80054e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a4:	d11d      	bne.n	80054e2 <SPI_EndRxTransaction+0xa6>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ae:	d004      	beq.n	80054ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d113      	bne.n	80054e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff ff2a 	bl	8005320 <SPI_WaitFifoStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e000      	b.n	80054e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff ff0b 	bl	8005320 <SPI_WaitFifoStateUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e027      	b.n	8005570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fe70 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e014      	b.n	8005570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fee4 	bl	8005320 <SPI_WaitFifoStateUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e000      	b.n	8005570 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e049      	b.n	800561e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc fd68 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f000 faa6 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d001      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e04f      	b.n	80056e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a23      	ldr	r2, [pc, #140]	; (80056ec <HAL_TIM_Base_Start_IT+0xc4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01d      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d018      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x76>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <HAL_TIM_Base_Start_IT+0xd8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d115      	bne.n	80056ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_TIM_Base_Start_IT+0xdc>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d015      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0xb4>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b6:	d011      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	e008      	b.n	80056dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e000      	b.n	80056de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40013400 	.word	0x40013400
 8005700:	40014000 	.word	0x40014000
 8005704:	00010007 	.word	0x00010007

08005708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0202 	mvn.w	r2, #2
 8005734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f9be 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9b0 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f9c1 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b04      	cmp	r3, #4
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0204 	mvn.w	r2, #4
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f994 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f986 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f997 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0208 	mvn.w	r2, #8
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2204      	movs	r2, #4
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f96a 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f95c 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f96d 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d122      	bne.n	8005860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b10      	cmp	r3, #16
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0210 	mvn.w	r2, #16
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2208      	movs	r2, #8
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f940 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f932 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f943 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0201 	mvn.w	r2, #1
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fb72 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d107      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 faee 	bl	8005e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d10e      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b80      	cmp	r3, #128	; 0x80
 80058d4:	d107      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fae1 	bl	8005ea8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d10e      	bne.n	8005912 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d107      	bne.n	8005912 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8f1 	bl	8005af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b20      	cmp	r3, #32
 800591e:	d10e      	bne.n	800593e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d107      	bne.n	800593e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0220 	mvn.w	r2, #32
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 faa1 	bl	8005e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_TIM_ConfigClockSource+0x18>
 800595a:	2302      	movs	r3, #2
 800595c:	e0a8      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005980:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005988:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d067      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x124>
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d80b      	bhi.n	80059b6 <HAL_TIM_ConfigClockSource+0x70>
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d073      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x144>
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d802      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x66>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d06f      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059aa:	e078      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d06c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x144>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d06a      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x144>
      break;
 80059b4:	e073      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059b6:	2b70      	cmp	r3, #112	; 0x70
 80059b8:	d00d      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x90>
 80059ba:	2b70      	cmp	r3, #112	; 0x70
 80059bc:	d804      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x82>
 80059be:	2b50      	cmp	r3, #80	; 0x50
 80059c0:	d033      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xe4>
 80059c2:	2b60      	cmp	r3, #96	; 0x60
 80059c4:	d041      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80059c6:	e06a      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	d066      	beq.n	8005a9c <HAL_TIM_ConfigClockSource+0x156>
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	d017      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80059d4:	e063      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f000 f9a3 	bl	8005d30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
      break;
 8005a02:	e04c      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f000 f98c 	bl	8005d30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a26:	609a      	str	r2, [r3, #8]
      break;
 8005a28:	e039      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 f900 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2150      	movs	r1, #80	; 0x50
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f959 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a48:	e029      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 f91f 	bl	8005c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2160      	movs	r1, #96	; 0x60
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f949 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a68:	e019      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 f8e0 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f939 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a88:	e009      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 f930 	bl	8005cfa <TIM_ITRx_SetConfig>
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005a9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3a      	ldr	r2, [pc, #232]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d01b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <TIM_Base_SetConfig+0x118>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d017      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2b      	ldr	r2, [pc, #172]	; (8005c24 <TIM_Base_SetConfig+0x11c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <TIM_Base_SetConfig+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <TIM_Base_SetConfig+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <TIM_Base_SetConfig+0x130>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <TIM_Base_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <TIM_Base_SetConfig+0x124>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <TIM_Base_SetConfig+0x128>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <TIM_Base_SetConfig+0x12c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0f      	ldr	r2, [pc, #60]	; (8005c38 <TIM_Base_SetConfig+0x130>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 030a 	bic.w	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0210 	bic.w	r2, r3, #16
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f043 0307 	orr.w	r3, r3, #7
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e068      	b.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d018      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10c      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40014000 	.word	0x40014000

08005e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e040      	b.n	8005f50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fc f8ec 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	; 0x24
 8005ee8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa2a 	bl	8006354 <UART_SetConfig>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e022      	b.n	8005f50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fca8 	bl	8006868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fd2f 	bl	80069ac <UART_CheckIdleState>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	f040 808a 	bne.w	8006084 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Receive_IT+0x24>
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e082      	b.n	8006086 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Receive_IT+0x36>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e07b      	b.n	8006086 <HAL_UART_Receive_IT+0x12e>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	88fa      	ldrh	r2, [r7, #6]
 8005fa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d10e      	bne.n	8005fda <HAL_UART_Receive_IT+0x82>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <HAL_UART_Receive_IT+0x78>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fce:	e02d      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	22ff      	movs	r2, #255	; 0xff
 8005fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fd8:	e028      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <HAL_UART_Receive_IT+0xa6>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x9c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	22ff      	movs	r2, #255	; 0xff
 8005fee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ff2:	e01b      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	227f      	movs	r2, #127	; 0x7f
 8005ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ffc:	e016      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006006:	d10d      	bne.n	8006024 <HAL_UART_Receive_IT+0xcc>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_UART_Receive_IT+0xc2>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	227f      	movs	r2, #127	; 0x7f
 8006014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006018:	e008      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	223f      	movs	r2, #63	; 0x3f
 800601e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006022:	e003      	b.n	800602c <HAL_UART_Receive_IT+0xd4>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2222      	movs	r2, #34	; 0x22
 8006036:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d107      	bne.n	8006062 <HAL_UART_Receive_IT+0x10a>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <HAL_UART_Receive_IT+0x13c>)
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
 8006060:	e002      	b.n	8006068 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a0c      	ldr	r2, [pc, #48]	; (8006098 <HAL_UART_Receive_IT+0x140>)
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800607e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	08006c75 	.word	0x08006c75
 8006098:	08006bcb 	.word	0x08006bcb

0800609c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	f640 030f 	movw	r3, #2063	; 0x80f
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d113      	bne.n	80060f4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d009      	beq.n	80060f4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8114 	beq.w	8006312 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
      }
      return;
 80060f2:	e10e      	b.n	8006312 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80d6 	beq.w	80062a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d105      	bne.n	8006112 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4b86      	ldr	r3, [pc, #536]	; (8006324 <HAL_UART_IRQHandler+0x288>)
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80cb 	beq.w	80062a8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00e      	beq.n	800613a <HAL_UART_IRQHandler+0x9e>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2201      	movs	r2, #1
 800612c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00e      	beq.n	8006162 <HAL_UART_IRQHandler+0xc6>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2202      	movs	r2, #2
 8006154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800615a:	f043 0204 	orr.w	r2, r3, #4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00e      	beq.n	800618a <HAL_UART_IRQHandler+0xee>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2204      	movs	r2, #4
 800617c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2208      	movs	r2, #8
 80061ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b4:	f043 0208 	orr.w	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00f      	beq.n	80061e6 <HAL_UART_IRQHandler+0x14a>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8093 	beq.w	8006316 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006218:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	d004      	beq.n	8006232 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800622e:	2b00      	cmp	r3, #0
 8006230:	d031      	beq.n	8006296 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc7a 	bl	8006b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d123      	bne.n	800628e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006254:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d013      	beq.n	8006286 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006262:	4a31      	ldr	r2, [pc, #196]	; (8006328 <HAL_UART_IRQHandler+0x28c>)
 8006264:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	4618      	mov	r0, r3
 800626c:	f7fc f9bb 	bl	80025e6 <HAL_DMA_Abort_IT>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006280:	4610      	mov	r0, r2
 8006282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	e00e      	b.n	80062a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f85a 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	e00a      	b.n	80062a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f856 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e006      	b.n	80062a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f852 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80062a2:	e038      	b.n	8006316 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	bf00      	nop
    return;
 80062a6:	e036      	b.n	8006316 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_UART_IRQHandler+0x232>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fd29 	bl	8006d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062cc:	e026      	b.n	800631c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
    }
    return;
 80062f2:	e012      	b.n	800631a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <HAL_UART_IRQHandler+0x280>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc45 	bl	8006b98 <UART_EndTransmit_IT>
    return;
 800630e:	bf00      	nop
 8006310:	e004      	b.n	800631c <HAL_UART_IRQHandler+0x280>
      return;
 8006312:	bf00      	nop
 8006314:	e002      	b.n	800631c <HAL_UART_IRQHandler+0x280>
    return;
 8006316:	bf00      	nop
 8006318:	e000      	b.n	800631c <HAL_UART_IRQHandler+0x280>
    return;
 800631a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	04000120 	.word	0x04000120
 8006328:	08006b6d 	.word	0x08006b6d

0800632c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4313      	orrs	r3, r2
 8006378:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4bac      	ldr	r3, [pc, #688]	; (8006634 <UART_SetConfig+0x2e0>)
 8006382:	4013      	ands	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	69f9      	ldr	r1, [r7, #28]
 800638a:	430b      	orrs	r3, r1
 800638c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4aa2      	ldr	r2, [pc, #648]	; (8006638 <UART_SetConfig+0x2e4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a99      	ldr	r2, [pc, #612]	; (800663c <UART_SetConfig+0x2e8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d121      	bne.n	8006420 <UART_SetConfig+0xcc>
 80063dc:	4b98      	ldr	r3, [pc, #608]	; (8006640 <UART_SetConfig+0x2ec>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d816      	bhi.n	8006418 <UART_SetConfig+0xc4>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x9c>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006401 	.word	0x08006401
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	08006407 	.word	0x08006407
 80063fc:	08006413 	.word	0x08006413
 8006400:	2301      	movs	r3, #1
 8006402:	76fb      	strb	r3, [r7, #27]
 8006404:	e0e8      	b.n	80065d8 <UART_SetConfig+0x284>
 8006406:	2302      	movs	r3, #2
 8006408:	76fb      	strb	r3, [r7, #27]
 800640a:	e0e5      	b.n	80065d8 <UART_SetConfig+0x284>
 800640c:	2304      	movs	r3, #4
 800640e:	76fb      	strb	r3, [r7, #27]
 8006410:	e0e2      	b.n	80065d8 <UART_SetConfig+0x284>
 8006412:	2308      	movs	r3, #8
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e0df      	b.n	80065d8 <UART_SetConfig+0x284>
 8006418:	2310      	movs	r3, #16
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	bf00      	nop
 800641e:	e0db      	b.n	80065d8 <UART_SetConfig+0x284>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a87      	ldr	r2, [pc, #540]	; (8006644 <UART_SetConfig+0x2f0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d134      	bne.n	8006494 <UART_SetConfig+0x140>
 800642a:	4b85      	ldr	r3, [pc, #532]	; (8006640 <UART_SetConfig+0x2ec>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f003 030c 	and.w	r3, r3, #12
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d829      	bhi.n	800648c <UART_SetConfig+0x138>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0xec>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006475 	.word	0x08006475
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800648d 	.word	0x0800648d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	08006481 	.word	0x08006481
 8006454:	0800648d 	.word	0x0800648d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800648d 	.word	0x0800648d
 8006460:	0800647b 	.word	0x0800647b
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006487 	.word	0x08006487
 8006474:	2300      	movs	r3, #0
 8006476:	76fb      	strb	r3, [r7, #27]
 8006478:	e0ae      	b.n	80065d8 <UART_SetConfig+0x284>
 800647a:	2302      	movs	r3, #2
 800647c:	76fb      	strb	r3, [r7, #27]
 800647e:	e0ab      	b.n	80065d8 <UART_SetConfig+0x284>
 8006480:	2304      	movs	r3, #4
 8006482:	76fb      	strb	r3, [r7, #27]
 8006484:	e0a8      	b.n	80065d8 <UART_SetConfig+0x284>
 8006486:	2308      	movs	r3, #8
 8006488:	76fb      	strb	r3, [r7, #27]
 800648a:	e0a5      	b.n	80065d8 <UART_SetConfig+0x284>
 800648c:	2310      	movs	r3, #16
 800648e:	76fb      	strb	r3, [r7, #27]
 8006490:	bf00      	nop
 8006492:	e0a1      	b.n	80065d8 <UART_SetConfig+0x284>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6b      	ldr	r2, [pc, #428]	; (8006648 <UART_SetConfig+0x2f4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d120      	bne.n	80064e0 <UART_SetConfig+0x18c>
 800649e:	4b68      	ldr	r3, [pc, #416]	; (8006640 <UART_SetConfig+0x2ec>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d00f      	beq.n	80064cc <UART_SetConfig+0x178>
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d802      	bhi.n	80064b6 <UART_SetConfig+0x162>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0x16c>
 80064b4:	e010      	b.n	80064d8 <UART_SetConfig+0x184>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d005      	beq.n	80064c6 <UART_SetConfig+0x172>
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d009      	beq.n	80064d2 <UART_SetConfig+0x17e>
 80064be:	e00b      	b.n	80064d8 <UART_SetConfig+0x184>
 80064c0:	2300      	movs	r3, #0
 80064c2:	76fb      	strb	r3, [r7, #27]
 80064c4:	e088      	b.n	80065d8 <UART_SetConfig+0x284>
 80064c6:	2302      	movs	r3, #2
 80064c8:	76fb      	strb	r3, [r7, #27]
 80064ca:	e085      	b.n	80065d8 <UART_SetConfig+0x284>
 80064cc:	2304      	movs	r3, #4
 80064ce:	76fb      	strb	r3, [r7, #27]
 80064d0:	e082      	b.n	80065d8 <UART_SetConfig+0x284>
 80064d2:	2308      	movs	r3, #8
 80064d4:	76fb      	strb	r3, [r7, #27]
 80064d6:	e07f      	b.n	80065d8 <UART_SetConfig+0x284>
 80064d8:	2310      	movs	r3, #16
 80064da:	76fb      	strb	r3, [r7, #27]
 80064dc:	bf00      	nop
 80064de:	e07b      	b.n	80065d8 <UART_SetConfig+0x284>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a59      	ldr	r2, [pc, #356]	; (800664c <UART_SetConfig+0x2f8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d120      	bne.n	800652c <UART_SetConfig+0x1d8>
 80064ea:	4b55      	ldr	r3, [pc, #340]	; (8006640 <UART_SetConfig+0x2ec>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d00f      	beq.n	8006518 <UART_SetConfig+0x1c4>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d802      	bhi.n	8006502 <UART_SetConfig+0x1ae>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <UART_SetConfig+0x1b8>
 8006500:	e010      	b.n	8006524 <UART_SetConfig+0x1d0>
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d005      	beq.n	8006512 <UART_SetConfig+0x1be>
 8006506:	2bc0      	cmp	r3, #192	; 0xc0
 8006508:	d009      	beq.n	800651e <UART_SetConfig+0x1ca>
 800650a:	e00b      	b.n	8006524 <UART_SetConfig+0x1d0>
 800650c:	2300      	movs	r3, #0
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e062      	b.n	80065d8 <UART_SetConfig+0x284>
 8006512:	2302      	movs	r3, #2
 8006514:	76fb      	strb	r3, [r7, #27]
 8006516:	e05f      	b.n	80065d8 <UART_SetConfig+0x284>
 8006518:	2304      	movs	r3, #4
 800651a:	76fb      	strb	r3, [r7, #27]
 800651c:	e05c      	b.n	80065d8 <UART_SetConfig+0x284>
 800651e:	2308      	movs	r3, #8
 8006520:	76fb      	strb	r3, [r7, #27]
 8006522:	e059      	b.n	80065d8 <UART_SetConfig+0x284>
 8006524:	2310      	movs	r3, #16
 8006526:	76fb      	strb	r3, [r7, #27]
 8006528:	bf00      	nop
 800652a:	e055      	b.n	80065d8 <UART_SetConfig+0x284>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a47      	ldr	r2, [pc, #284]	; (8006650 <UART_SetConfig+0x2fc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d124      	bne.n	8006580 <UART_SetConfig+0x22c>
 8006536:	4b42      	ldr	r3, [pc, #264]	; (8006640 <UART_SetConfig+0x2ec>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d012      	beq.n	800656c <UART_SetConfig+0x218>
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d802      	bhi.n	8006552 <UART_SetConfig+0x1fe>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <UART_SetConfig+0x20c>
 8006550:	e012      	b.n	8006578 <UART_SetConfig+0x224>
 8006552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006556:	d006      	beq.n	8006566 <UART_SetConfig+0x212>
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d009      	beq.n	8006572 <UART_SetConfig+0x21e>
 800655e:	e00b      	b.n	8006578 <UART_SetConfig+0x224>
 8006560:	2300      	movs	r3, #0
 8006562:	76fb      	strb	r3, [r7, #27]
 8006564:	e038      	b.n	80065d8 <UART_SetConfig+0x284>
 8006566:	2302      	movs	r3, #2
 8006568:	76fb      	strb	r3, [r7, #27]
 800656a:	e035      	b.n	80065d8 <UART_SetConfig+0x284>
 800656c:	2304      	movs	r3, #4
 800656e:	76fb      	strb	r3, [r7, #27]
 8006570:	e032      	b.n	80065d8 <UART_SetConfig+0x284>
 8006572:	2308      	movs	r3, #8
 8006574:	76fb      	strb	r3, [r7, #27]
 8006576:	e02f      	b.n	80065d8 <UART_SetConfig+0x284>
 8006578:	2310      	movs	r3, #16
 800657a:	76fb      	strb	r3, [r7, #27]
 800657c:	bf00      	nop
 800657e:	e02b      	b.n	80065d8 <UART_SetConfig+0x284>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <UART_SetConfig+0x2e4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d124      	bne.n	80065d4 <UART_SetConfig+0x280>
 800658a:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <UART_SetConfig+0x2ec>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d012      	beq.n	80065c0 <UART_SetConfig+0x26c>
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d802      	bhi.n	80065a6 <UART_SetConfig+0x252>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <UART_SetConfig+0x260>
 80065a4:	e012      	b.n	80065cc <UART_SetConfig+0x278>
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d006      	beq.n	80065ba <UART_SetConfig+0x266>
 80065ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065b0:	d009      	beq.n	80065c6 <UART_SetConfig+0x272>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x278>
 80065b4:	2300      	movs	r3, #0
 80065b6:	76fb      	strb	r3, [r7, #27]
 80065b8:	e00e      	b.n	80065d8 <UART_SetConfig+0x284>
 80065ba:	2302      	movs	r3, #2
 80065bc:	76fb      	strb	r3, [r7, #27]
 80065be:	e00b      	b.n	80065d8 <UART_SetConfig+0x284>
 80065c0:	2304      	movs	r3, #4
 80065c2:	76fb      	strb	r3, [r7, #27]
 80065c4:	e008      	b.n	80065d8 <UART_SetConfig+0x284>
 80065c6:	2308      	movs	r3, #8
 80065c8:	76fb      	strb	r3, [r7, #27]
 80065ca:	e005      	b.n	80065d8 <UART_SetConfig+0x284>
 80065cc:	2310      	movs	r3, #16
 80065ce:	76fb      	strb	r3, [r7, #27]
 80065d0:	bf00      	nop
 80065d2:	e001      	b.n	80065d8 <UART_SetConfig+0x284>
 80065d4:	2310      	movs	r3, #16
 80065d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a16      	ldr	r2, [pc, #88]	; (8006638 <UART_SetConfig+0x2e4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f040 8087 	bne.w	80066f2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d836      	bhi.n	8006658 <UART_SetConfig+0x304>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0x29c>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006615 	.word	0x08006615
 80065f4:	08006659 	.word	0x08006659
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006623 	.word	0x08006623
 8006604:	08006659 	.word	0x08006659
 8006608:	08006659 	.word	0x08006659
 800660c:	08006659 	.word	0x08006659
 8006610:	0800662b 	.word	0x0800662b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006614:	f7fd fb6c 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8006618:	6178      	str	r0, [r7, #20]
        break;
 800661a:	e022      	b.n	8006662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <UART_SetConfig+0x300>)
 800661e:	617b      	str	r3, [r7, #20]
        break;
 8006620:	e01f      	b.n	8006662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fd facf 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8006626:	6178      	str	r0, [r7, #20]
        break;
 8006628:	e01b      	b.n	8006662 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	617b      	str	r3, [r7, #20]
        break;
 8006630:	e017      	b.n	8006662 <UART_SetConfig+0x30e>
 8006632:	bf00      	nop
 8006634:	efff69f3 	.word	0xefff69f3
 8006638:	40008000 	.word	0x40008000
 800663c:	40013800 	.word	0x40013800
 8006640:	40021000 	.word	0x40021000
 8006644:	40004400 	.word	0x40004400
 8006648:	40004800 	.word	0x40004800
 800664c:	40004c00 	.word	0x40004c00
 8006650:	40005000 	.word	0x40005000
 8006654:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	76bb      	strb	r3, [r7, #26]
        break;
 8006660:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80f1 	beq.w	800684c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4413      	add	r3, r2
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	d305      	bcc.n	8006686 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d902      	bls.n	800668c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	76bb      	strb	r3, [r7, #26]
 800668a:	e0df      	b.n	800684c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4619      	mov	r1, r3
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	f04f 0400 	mov.w	r4, #0
 800669c:	0214      	lsls	r4, r2, #8
 800669e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80066a2:	020b      	lsls	r3, r1, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6852      	ldr	r2, [r2, #4]
 80066a8:	0852      	lsrs	r2, r2, #1
 80066aa:	4611      	mov	r1, r2
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	eb13 0b01 	adds.w	fp, r3, r1
 80066b4:	eb44 0c02 	adc.w	ip, r4, r2
 80066b8:	4658      	mov	r0, fp
 80066ba:	4661      	mov	r1, ip
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f04f 0400 	mov.w	r4, #0
 80066c4:	461a      	mov	r2, r3
 80066c6:	4623      	mov	r3, r4
 80066c8:	f7f9 fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80066cc:	4603      	mov	r3, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d8:	d308      	bcc.n	80066ec <UART_SetConfig+0x398>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e0:	d204      	bcs.n	80066ec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	e0af      	b.n	800684c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	76bb      	strb	r3, [r7, #26]
 80066f0:	e0ac      	b.n	800684c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fa:	d15b      	bne.n	80067b4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80066fc:	7efb      	ldrb	r3, [r7, #27]
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d827      	bhi.n	8006752 <UART_SetConfig+0x3fe>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <UART_SetConfig+0x3b4>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800672d 	.word	0x0800672d
 800670c:	08006735 	.word	0x08006735
 8006710:	0800673d 	.word	0x0800673d
 8006714:	08006753 	.word	0x08006753
 8006718:	08006743 	.word	0x08006743
 800671c:	08006753 	.word	0x08006753
 8006720:	08006753 	.word	0x08006753
 8006724:	08006753 	.word	0x08006753
 8006728:	0800674b 	.word	0x0800674b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fd fae0 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8006730:	6178      	str	r0, [r7, #20]
        break;
 8006732:	e013      	b.n	800675c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006734:	f7fd faf2 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8006738:	6178      	str	r0, [r7, #20]
        break;
 800673a:	e00f      	b.n	800675c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800673c:	4b49      	ldr	r3, [pc, #292]	; (8006864 <UART_SetConfig+0x510>)
 800673e:	617b      	str	r3, [r7, #20]
        break;
 8006740:	e00c      	b.n	800675c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006742:	f7fd fa3f 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8006746:	6178      	str	r0, [r7, #20]
        break;
 8006748:	e008      	b.n	800675c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800674a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674e:	617b      	str	r3, [r7, #20]
        break;
 8006750:	e004      	b.n	800675c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	76bb      	strb	r3, [r7, #26]
        break;
 800675a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d074      	beq.n	800684c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	005a      	lsls	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b0f      	cmp	r3, #15
 800677e:	d916      	bls.n	80067ae <UART_SetConfig+0x45a>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006786:	d212      	bcs.n	80067ae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f023 030f 	bic.w	r3, r3, #15
 8006790:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	b29b      	uxth	r3, r3
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	b29a      	uxth	r2, r3
 800679e:	89fb      	ldrh	r3, [r7, #14]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	89fa      	ldrh	r2, [r7, #14]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e04e      	b.n	800684c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	76bb      	strb	r3, [r7, #26]
 80067b2:	e04b      	b.n	800684c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067b4:	7efb      	ldrb	r3, [r7, #27]
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d827      	bhi.n	800680a <UART_SetConfig+0x4b6>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x46c>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067e5 	.word	0x080067e5
 80067c4:	080067ed 	.word	0x080067ed
 80067c8:	080067f5 	.word	0x080067f5
 80067cc:	0800680b 	.word	0x0800680b
 80067d0:	080067fb 	.word	0x080067fb
 80067d4:	0800680b 	.word	0x0800680b
 80067d8:	0800680b 	.word	0x0800680b
 80067dc:	0800680b 	.word	0x0800680b
 80067e0:	08006803 	.word	0x08006803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e4:	f7fd fa84 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80067e8:	6178      	str	r0, [r7, #20]
        break;
 80067ea:	e013      	b.n	8006814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ec:	f7fd fa96 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 80067f0:	6178      	str	r0, [r7, #20]
        break;
 80067f2:	e00f      	b.n	8006814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <UART_SetConfig+0x510>)
 80067f6:	617b      	str	r3, [r7, #20]
        break;
 80067f8:	e00c      	b.n	8006814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fa:	f7fd f9e3 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 80067fe:	6178      	str	r0, [r7, #20]
        break;
 8006800:	e008      	b.n	8006814 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006806:	617b      	str	r3, [r7, #20]
        break;
 8006808:	e004      	b.n	8006814 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	76bb      	strb	r3, [r7, #26]
        break;
 8006812:	bf00      	nop
    }

    if (pclk != 0U)
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d018      	beq.n	800684c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085a      	lsrs	r2, r3, #1
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	441a      	add	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d908      	bls.n	8006848 <UART_SetConfig+0x4f4>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d204      	bcs.n	8006848 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e001      	b.n	800684c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006858:	7ebb      	ldrb	r3, [r7, #26]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006864:	00f42400 	.word	0x00f42400

08006868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01a      	beq.n	800697e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006966:	d10a      	bne.n	800697e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069ba:	f7fb fcd5 	bl	8002368 <HAL_GetTick>
 80069be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d10e      	bne.n	80069ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f82a 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e020      	b.n	8006a2e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d10e      	bne.n	8006a18 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f814 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e00a      	b.n	8006a2e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	e05d      	b.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d059      	beq.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	f7fb fc8a 	bl	8002368 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11b      	bne.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e042      	b.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02b      	beq.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aba:	d123      	bne.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ac4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ad4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e00f      	b.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d092      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fbd8 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fbb5 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bd8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	d13a      	bne.n	8006c58 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006be8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bea:	89bb      	ldrh	r3, [r7, #12]
 8006bec:	b2d9      	uxtb	r1, r3
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	400a      	ands	r2, r1
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d123      	bne.n	8006c6c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c32:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fa f9a1 	bl	8000f98 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c56:	e009      	b.n	8006c6c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	8b1b      	ldrh	r3, [r3, #24]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0208 	orr.w	r2, r2, #8
 8006c68:	b292      	uxth	r2, r2
 8006c6a:	831a      	strh	r2, [r3, #24]
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c88:	2b22      	cmp	r3, #34	; 0x22
 8006c8a:	d13a      	bne.n	8006d02 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c9a:	89ba      	ldrh	r2, [r7, #12]
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d123      	bne.n	8006d16 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cdc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fa f94c 	bl	8000f98 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d00:	e009      	b.n	8006d16 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	8b1b      	ldrh	r3, [r3, #24]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0208 	orr.w	r2, r2, #8
 8006d12:	b292      	uxth	r2, r2
 8006d14:	831a      	strh	r2, [r3, #24]
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4e0d      	ldr	r6, [pc, #52]	; (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	; (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1ba4      	subs	r4, r4, r6
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2500      	movs	r5, #0
 8006d40:	42a5      	cmp	r5, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4e0b      	ldr	r6, [pc, #44]	; (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	; (8006d78 <__libc_init_array+0x44>)
 8006d48:	f000 f834 	bl	8006db4 <_init>
 8006d4c:	1ba4      	subs	r4, r4, r6
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2500      	movs	r5, #0
 8006d52:	42a5      	cmp	r5, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d5c:	4798      	blx	r3
 8006d5e:	3501      	adds	r5, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d66:	4798      	blx	r3
 8006d68:	3501      	adds	r5, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	08006fcc 	.word	0x08006fcc
 8006d70:	08006fcc 	.word	0x08006fcc
 8006d74:	08006fcc 	.word	0x08006fcc
 8006d78:	08006fd0 	.word	0x08006fd0

08006d7c <memcpy>:
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	1e43      	subs	r3, r0, #1
 8006d80:	440a      	add	r2, r1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	d100      	bne.n	8006d88 <memcpy+0xc>
 8006d86:	bd10      	pop	{r4, pc}
 8006d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d90:	e7f7      	b.n	8006d82 <memcpy+0x6>

08006d92 <memset>:
 8006d92:	4402      	add	r2, r0
 8006d94:	4603      	mov	r3, r0
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d100      	bne.n	8006d9c <memset+0xa>
 8006d9a:	4770      	bx	lr
 8006d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006da0:	e7f9      	b.n	8006d96 <memset+0x4>

08006da2 <strcpy>:
 8006da2:	4603      	mov	r3, r0
 8006da4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006da8:	f803 2b01 	strb.w	r2, [r3], #1
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d1f9      	bne.n	8006da4 <strcpy+0x2>
 8006db0:	4770      	bx	lr
	...

08006db4 <_init>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr

08006dc0 <_fini>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr
